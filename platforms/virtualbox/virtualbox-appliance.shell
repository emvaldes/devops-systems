#!/usr/bin/env bash

# Functions: virtualbox_appliance
#            chedck_status
#            newline
#            postinst_packages
#            preinst_packages
#            sudoers_autologin
#            sudoers_privileges
#            vboxmanage_configvm
#            vboxmanage_interface
#            vboxmanage_multimedia
#            vboxmanage_networking
#            vboxmanage_storage
#
# virtualbox-appliance.shell --help ;
#
# Required    --vm-name           VirtualBox appliance name and hostname
#             --account           Service Account (username: devops)
#             --password          Service Account (password: devops)
#
# Optional    --appliance         Virtual Machine name
#             --cache             Deployment resources location
#             --configure         Deploy Configuration Management
#             --create            Create VBox appliance (hardware only)
#             --delete            Shutdown & Destroy VBox appliance
#             --deploy            Generate Auto-Install (unattended)
#             --install           Install Default DevOps Packages
#             --iso-file          Installation ISO file location
#             --packages          Install Custom DevOps Packages
#             --patch             Patching Unattended installation
#             --projects          Provide VBox projects location
#             --provision         Infrastructure Provisioning (IaC)
#             --ssh-key           Profile Auto-Login via SSH Public Key
#             --start             Requesting to launch VBox Appliance
#             --example           Display script's execution options
#             --wizard            Parse user-input to execute command
#             --info              Project credits and online references
#             --help              Show this help message and exits
#
# Usage:
#
# virtualbox-appliance.shell --vm-name="ubuntu-desktop" \
#                            --account="devops" \
#                            --password="devops" \
#                            --iso-file="ubuntu-22.04.1-desktop-amd64.iso" \
#                            --provision \
#                            --deploy \
#                            --patch \
#                            --start \
# ;
#
# virtualbox-appliance.shell --vm-name="ubuntu-desktop" \
#                            --account="devops" \
#                            --password="devops" \
#                            --ssh-key="${HOME}/.ssh/id_rsa.pub" \
#                            --configure \
#                            --install \
# ;
#
# virtualbox-appliance.shell --vm-name="ubuntu-desktop" \
#                            --install \
#                            --packages="/tmp/packages.list" \
# ;

## -----------------------------------------------------------------------------
## Reference: https://www.virtualbox.org/manual/UserManual.html
              #unattended-guest-install-example
## -----------------------------------------------------------------------------

export script_file="$(pwd)/${0#*\/}";
export script_name="$( basename ${script_file} )";

export user_local="${HOME}/.local";
mkdir -p "${user_local}";

## -----------------------------------------------------------------------------
## Objective: System Pre-Requirements

## Description: Constructing GitHub URI (raw user content)
export github_content='raw.githubusercontent.com';
export github_repo='emvaldes/devops-systems';

export virtualbox_platform='master/platforms/virtualbox';

## -----------------------------------------------------------------------------
## Objective: Script & Environment Variables

## Random Password:
function password () {
    echo -en $( date +%s | sha256sum | base64 | head -c 32 );
    return 0;
  };
export root_password="$(password)";

## Execution timestamp:
export timestamp="$( date +"%y%m%d%H%M%S" )";

## Events status counter:
export counter=0;

function newline () { echo -e; return 0; };

## -----------------------------------------------------------------------------
## Objective: Parsing operational status for each event
function check_status () {
    status=${1};
    if [[ ${status} -ne 0 ]]; then
            user_input="$((counter++)) = Error was found. Continue [N/y]: ";
            newline; read -t 15 -p "${user_input}" response;
            if [[ ${#response} -gt 0 ]]; then
                    selection="$(
                        echo -e ${response} \
                           | tr '[[:upper:]]' '[[:lower:]]'
                      )";
                    if [[ 'n' =~ "${selection:0:1}" ]]; then
                            exit ${status};
                      else  return 1;
                    fi;
              else  exit ${status};
            fi;
      else  return 2;
    fi;
    return 0;
  }; alias check-status='check_status';

## -----------------------------------------------------------------------------
function vboxmanage_storage () {
    local oIFS="${IFS}";
    for xitem in "${@}"; do
      IFS='='; set `echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'`
      [[ ${1#*\--} = "vm-name" ]] && local vm_name="${2}";
      [[ ${1#*\--} = "iso-file" ]] && local iso_filename="${2}";
      [[ ${1#*\--} = "vm-location" ]] && local vm_location="${2}";
      [[ ${1#*\--} = "volume-size" ]] && local volume_size="${2}";
    done; IFS="${oIFS}";
    local oIFS="${IFS}"; IFS=$'\n';
    [[ ${#vm_location} -eq 0 ]] && {
        newline;
        echo -e "Warning: No Virtual Machine Location was provided! ";
        newline;
        exit 1;
      };
    [[ ${#volume_size} -eq 0 ]] && volume_size='25000';
    ## Create a virtual hard disk and storage devices for the Virtual Machine.
    newline;
    echo -e "Creating Medium (Hard Drive: *.vdi)";
    VBoxManage createhd \
             --filename "${vm_location}/${vm_name}.vdi" \
             --size ${volume_size} \
    ;
    check_status;
    newline;
    ## Create a SATA storage controller and attach the virtual hard disk.
    VBoxManage storagectl ${vm_name} \
             --name "SATA Controller" \
             --add sata \
             --controller IntelAHCI \
    ;
    check_status;
    VBoxManage storageattach ${vm_name} \
             --storagectl "SATA Controller" \
             --port 0 \
             --device 0 \
             --type hdd \
             --medium "${vm_location}/${vm_name}.vdi" \
    ;
    check_status;
    ## Create an IDE Storage Controller for a virtual DVD drive
    ## and attach a Linux installation ISO.
    VBoxManage storagectl ${vm_name} \
             --name "IDE Controller" \
             --add ide \
    ;
    check_status;
    VBoxManage storageattach ${vm_name} \
             --storagectl "IDE Controller" \
             --port 1 \
             --device 0 \
             --type dvddrive \
             --medium ${iso_filename} \
    ;
    check_status;
    IFS="${oIFS}";
    return 0;
  }; alias vboxmanage-storage='vboxmanage_storage';

## -----------------------------------------------------------------------------
function vboxmanage_configvm () {
    local oIFS="${IFS}";
    for xitem in "${@}"; do
      IFS='='; set `echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'`
      [[ ${1#*\--} = "vm-name" ]] && local vm_name="${2}";
      [[ ${1#*\--} = "cpus" ]] && local total_cpus="${2}";
      [[ ${1#*\--} = "memory" ]] && local memory_size="${2}";
      [[ ${1#*\--} = "vram" ]] && local vram_size="${2}";
    done; IFS="${oIFS}";
    local oIFS="${IFS}"; IFS=$'\n';
    ## General -> Advanced:
    VBoxManage modifyvm ${vm_name} \
             --clipboard-mode=bidirectional \
             --drag-and-drop=bidirectional \
    ;
    check_status;
    ## System -> Motherboard:
    VBoxManage modifyvm ${vm_name} \
             --memory ${memory_size} \
    ;
    check_status;
    ## Device Order (default: dvd+disk+...)
    VBoxManage modifyvm ${vm_name} \
             --boot1 dvd \
             --boot2 disk \
             --boot3 none \
             --boot4 none \
    ;
    check_status;
    VBoxManage modifyvm ${vm_name} \
             --chipset=piix3 \
             --mouse=usbmtscreenpluspad \
             --ioapic=on \
             --rtc-use-utc=on \
    ;
    check_status;
    ## System -> Processor:
    VBoxManage modifyvm ${vm_name} \
             --cpus=${total_cpus} \
             --cpu-execution-cap=100 \
             --pae=off \
    ;
    check_status;
    ## System -> Acceleration:
    VBoxManage modifyvm ${vm_name} \
             --paravirt-provider=default \
             --nested-paging=on \
    ;
    check_status;
    ## Display -> Screen:
    VBoxManage modifyvm ${vm_name} \
             --vram ${vram_size} \
             --monitor-count=1 \
             --graphicscontroller=vmsvga \
             --accelerate-3d=off \
    ;
    check_status;
    # ## Ports -> Serial Ports:
    # VBoxManage modifyvm ${vm_name} \
    #          --uart1=0x3f8 5 \
    #          --uart-mode1="/tmp/vbox--${vm_name}" \
    #          --uart-type1=16550a \
    # ;
    # check_status;
    ## Ports -> USB 2.0 (OHCI + EHCI) Controller
    VBoxManage modifyvm ${vm_name} \
             --usb-ehci=on \
    ;
    check_status;
    IFS="${oIFS}";
    return 0;
  }; alias vboxmanage-configvm='vboxmanage_configvm';

## -----------------------------------------------------------------------------
function vboxmanage_multimedia () {
    local oIFS="${IFS}";
    for xitem in "${@}"; do
      IFS='='; set `echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'`
      [[ ${1#*\--} = "vm-name" ]] && local vm_name="${2}";
      [[ ${1#*\--} = "file-name" ]] && local recording="${2}";
      [[ ${1#*\--} = "frame-rate" ]] && local frame_rate="${2}";
      [[ ${1#*\--} = "resolution" ]] && local resolution="${2}";
      [[ ${1#*\--} = "video-quality" ]] && local video_quality="${2}";
    done; IFS="${oIFS}";
    local oIFS="${IFS}"; IFS=$'\n';
    [[ ${#recording} -eq 0 ]] && {
        recording="${virtualbox_projects}/recordings/${vm_name}-screen0.webm";
      }
    [[ ${#frame_rate} -eq 0 ]] && frame_rate='30';
    [[ ${#video_quality} -eq 0 ]] && video_quality='2048';
    [[ ${#audio_controller} -eq 0 ]] && audio_controller='ac97';
    # ## Display
    VBoxManage modifyvm ${vm_name} \
             --recording=on \
             --recording-file=${recording} \
             --recording-video-fps=${frame_rate} \
             --recording-video-res=${resolution} \
             --recording-video-rate=${video_quality} \
    ;
    check_status;
    ## Audio:
    VBoxManage modifyvm ${vm_name} \
             --audio=default \
             --audio-controller=${audio_controller} \
             --audio-in=on \
             --audio-out=on \
    ;
    check_status;
    IFS="${oIFS}";
    return 0;
  }; alias vboxmanage-multimedia='vboxmanage_multimedia';

## -----------------------------------------------------------------------------
function vboxmanage_networking () {
    local oIFS="${IFS}";
    for xitem in "${@}"; do
      IFS='='; set `echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'`
      [[ ${1#*\--} = "vm-name" ]] && local vm_name="${2}";
      [[ ${1#*\--} = "bridged" ]] && local bridged_network="${2}";
      [[ ${1#*\--} = "hostonly-network" ]] && local hostonly_network="${2}";
      [[ ${1#*\--} = "nat-network" ]] && local nat_network="${2}";
      [[ ${1#*\--} = "nat-only" ]] && local nat_only="${2}";
      [[ ${1#*\--} = "nic-type" ]] && local nic_type="${2}";
    done; IFS="${oIFS}";
    local oIFS="${IFS}"; IFS=$'\n';
    [[ "${#bridged_network}" -gt 0 ]] && {
        trace_filename="/tmp/trace--bridged-network--${vm_name}";
        index="${bridged_network%%\,*}";
        interface="${bridged_network##*\,}";
        VBoxManage modifyvm ${vm_name} \
                 --nic${index}=bridged \
                 --nic-type${index}=${nic_type} \
                 --bridge-adapter${index}="${interface}" \
                 --cable-connected${index}=on \
                 --nic-trace${index}=on \
                 --nic-trace-file${index}=${trace_filename} \
        ;
        check_status;
      };
    [[ "${#hostonly_network}" -gt 0 ]] && {
        trace_filename="/tmp/trace--hostonly-network--${vm_name}";
        index="${hostonly_network%%\,*}";
        interface="${hostonly_network##*\,}";
        VBoxManage modifyvm ${vm_name} \
                 --nic${index}=hostonlynet \
                 --nic-type${index}=${nic_type} \
                 --host-only-net${index}="${interface}" \
                 --cable-connected${index}=on \
                 --nic-trace${index}=on \
                 --nic-trace-file${index}=${trace_filename} \
        ;
        check_status;
      };
    [[ "${#nat_network}" -gt 0 ]] && {
        trace_filename="/tmp/trace--nat-network--${vm_name}";
        index="${nat_network%%\,*}";
        interface="${nat_network##*\,}";
        VBoxManage modifyvm ${vm_name} \
                 --nic${index}=natnetwork \
                 --nic-type${index}=${nic_type} \
                 --host-only-net${index}="${interface}" \
                 --cable-connected${index}=on \
                 --nic-trace${index}=on \
                 --nic-trace-file${index}=${trace_filename} \
        ;
        check_status;
      };
    [[ ${#nat_only} -gt 0 ]] && {
        trace_filename="/tmp/trace--nat-only--${vm_name}";
        index="${nat_only%%\,*}";
        VBoxManage modifyvm ${vm_name} \
                 --nic${index}=nat \
                 --nic-type${index}=${nic_type} \
                 --cable-connected${index}=on \
                 --nic-trace${index}=on \
                 --nic-trace-file${index}=${trace_filename} \
        ;
        check_status;
      };
    IFS="${oIFS}";
    return 0;
  }; alias vboxmanage-networking='vboxmanage_networking';

## -----------------------------------------------------------------------------
function vboxmanage_interface () {
    local oIFS="${IFS}";
    for xitem in "${@}"; do
      IFS='='; set `echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'`
      [[ ${1#*\--} = "vm-name" ]] && local vm_name="${2}";
      [[ ${1#*\--} = "interface" ]] && local interface="${2}";
      [[ ${1#*\--} = "hostname" ]] && local hostname="${2}";
      [[ ${1#*\--} = "ssh-key" ]] && local sshkey_access="${2}";
    done; IFS="${oIFS}";
    local oIFS="${IFS}"; IFS=$'\n';
    ## Define custom-parameter(s):
    [[ ${#vm_name} -eq 0 ]] && {
        newline;
        echo -e "Warning: Missing VirtualBox Appliance Name! ";
        return 3;
      };
    [[ ${#interface} -eq 0 ]] && local interface="Bridged";
    [[ ${#hostname} -eq 0 ]] && local hostname="${appliance}";
    ## Identifying the VirtualBox Instance's IP Address
    declare -a showvminfo=($(
        VBoxManage showvminfo --details ${vm_name} \
        | grep bridged \
        | sed -e "s|^\(NIC.*\)\(MAC\:\ \)\([a-zA-Z0-9]*\)\(\,.*Bridged.*'\)\(.*\)\('\,.*\)$|\3\n\5|"
      ));
    local bridged_macaddr="$(
        echo -e "${showvminfo[0]}" \
           | fold -w2 \
           | tr '\n' ':' | tr '[[:upper:]]' '[[:lower:]]' \
           | sed -e 's|\:$||'
      )";  ## -e 's|00|0|g' -e 's|\(0\)\([0-9]\)|\2|g'
    local bridged_interface="${showvminfo[1]%\:*}";
    local localnet="${HOME}/.localnet";
    newline;
    echo -e "Executing ARP Scanning ... -> ${localnet} : ";
    ## Required to avoid any manual scanning
    sudo arp-scan --localnet | tee ${localnet};
    declare -a listed=($(
        egrep "${bridged_macaddr}" ${localnet} \
        | sed -e "s|${bridged_macaddr}|${vm_name}|" \
        | tr '\t' '*' | awk -F'*' '{print $1"\n"$2"\n"$3}'
      ));
    # for each in ${listed[@]}; do echo -e "${each}"; done;
    local ipaddr="${listed[0]}";
    local device="${listed[2]}";
    ## System Configuration files
    local etc_hosts="/etc/hosts";
    local ssh_config="${HOME}/.ssh/config";
    local known_hosts="${HOME}/.ssh/known_hosts";
    ## Processing valid IP Address
    if [[ ${#ipaddr} -gt 0 ]]; then
      ## Right-Padding IP Address
      local xipaddr="$( printf "% -20s" ${ipaddr})";
      local custom_message=" Record in ${etc_hosts} file! ";
      if [[ $( egrep -c " ${vm_name} " ${etc_hosts} ) -gt 0 ]]; then
              newline;
              echo -e "Warning: Updating ${custom_message}";
              sudo sed -i '' \
              "s|^\([0-9\.]\)\{1,\}\([[:blank:]]*\)\(${vm_name}.*\)$|${xipaddr}\3|" \
              "${etc_hosts}";
        else  newline;
              echo -e "Notice: Appending ${custom_message}";
              newline;
              echo -e "${xipaddr}${vm_name}" \
                 | sudo tee -a "${etc_hosts}";
      fi;
      local custom_message=" Record in ${ssh_config} file! ";
      if [[ $( egrep -c "Host ${vm_name}" ${ssh_config} ) -eq 0 ]]; then
              newline;
              echo -e "Updating ${custom_message}";
              declare -a config_block=();
              config_block+=("\nHost ${vm_name}");
              config_block+=("  AddKeysToAgent yes");
              config_block+=("  HostName ${ipaddress}");
              config_block+=("  User devops");
              config_block+=("  StrictHostKeyChecking no");
              config_block+=("  IdentityFile ${sshkey_access}");
              for each in ${config_block[@]}; do
                echo -e "${each}" >> ${ssh_config};
              done;
        else  ## Updating configuration block
              newline;
              echo -e "Updating ${custom_message}";
              local header="Host ${vm_name}";
              local footer="IdentityFile .*";
              sed -i '' \
                  "/${header}/,/${footer}/s/\(^.*HostName \)\(.*\)$/\1${ipaddr}/" \
                  ${ssh_config};
      fi;
      ## Listing SSH Configuration block
      egrep --fixed-strings \
            --before-context=1 \
            --after-context=6 \
            "Host ${vm_name}" ${ssh_config};
    fi;
    ## Removing/Purging host's legacy entries
    sed -i '' /^$(
        grep 'ubuntu-desktop' ${etc_hosts} | cut -d' ' -f1
      ).*/d ${known_hosts} ;
    IFS="${oIFS}";
    return 0;
  }; alias vboxmanage-interface='vboxmanage_interface';

## -----------------------------------------------------------------------------
## Objective: Configuring Sudoers Privileges
function sudoers_privileges () {
    ## Enabling Passwordless Access
    local privileges_script="sudoers-privileges.shell";
    local remote_module="ubuntu/modules/${privileges_script}";
    rm -fv ${vbox_temp}/${privileges_script} 2>/dev/null;
    # check_status;
    curl --silent \
         --output ${vbox_temp}/${privileges_script} \
         https://${github_content}/${github_repo}/master/${remote_module};
    check_status;
    while [[ ! -e ${vbox_temp}/${privileges_script} ]]; do
      echo -e '.'; sleep 1;
    done; echo -e;
    check_status;
    if [[ -e ${vbox_temp}/${privileges_script} ]]; then
            insert_lines="${vbox_temp}/insert-lines.file";
            ## Creating a temporary file and adding these hacking-lines
            echo -e "## Provisioning auto-configuration for passwordless sudo." \
                  > ${insert_lines};
            check_status;
            echo -en 'echo -e "'${devops_password}'\\n" ' \
                  >> ${insert_lines};
            check_status;
            echo -e  '| sudo -S systemctl status ssh 2>&1>/dev/null' \
                  >> ${insert_lines};
            check_status;
            ## Inserting into the sudoers-privileges.shell file
            ## the insert-lines.file’s content
            sed -i '' "/## {{ placeholder }}$/ r ${vbox_temp}/insert-lines.file" \
                      ${vbox_temp}/${privileges_script};
            check_status;
            ## Removing placeholder entry to avoid recurrencies
            sed -i '' '/## {{ placeholder }}/d' ${vbox_temp}/${privileges_script};
            check_status;
            ## Updating the serice-account placeholder
            sed -i '' -e "s|{{ service-account }}|${devops_account}|" \
                      ${vbox_temp}/${privileges_script};
            check_status;
            ## Listing applied configurations:
            cat  ${vbox_temp}/${privileges_script};
            ## Executing the sudoers-privileges.shell script
            ssh ${vm_name} -C 'bash -s' \
              < ${vbox_temp}/${privileges_script} 2>/dev/null;
            check_status;
      else  newline;
            echo -e "Warning: ${vbox_temp}/${privileges_script} is missing! ";
            return 4;
    fi;
    return 0;
  }; alias sudoers-privileges='sudoers_privileges';

## -----------------------------------------------------------------------------
## Objective: Configuring Auto-Login Capabilities
function sudoers_autologin () {
    local autlogin_script="sudoers-autologin.shell";
    local remote_module="ubuntu/modules/${autlogin_script}";
    rm -fv ${vbox_temp}/${autlogin_script} 2>/dev/null;
    # check_status;
    curl --silent \
         --output ${vbox_temp}/${autlogin_script} \
         https://${github_content}/${github_repo}/master/${remote_module};
    check_status;
    while [[ ! -e ${vbox_temp}/${autlogin_script} ]]; do
      echo -e '.'; sleep 1;
    done; echo -e;
    check_status;
    if [[ -e ${vbox_temp}/${autlogin_script} ]]; then
            ## Updating the serice-account placeholder
            sed -i '' -e "s|{{ service-account }}|${devops_account}|" \
                      ${vbox_temp}/${autlogin_script};
            check_status;
            ## Updating the virtual-machine placeholder
            sed -i '' -e "s|{{ virtual-machine }}|${virtual_machine}|" \
                      ${vbox_temp}/${autlogin_script};
            check_status;
            ssh ${vm_name} -C 'bash -s' \
              < ${vbox_temp}/${autlogin_script} 2>/dev/null;
            check_status;
      else  newline;
            echo -e "Warning: ${vbox_temp}/${autlogin_script} is missing! ";
            return 5;
    fi;
    return 0;
  }; alias sudoers-autologin='sudoers_autologin';

## -----------------------------------------------------------------------------
## Objective: Pre-Installing Core Packages
function preinst_packages () {
    local script_filename="ubuntu-preinstall.shell";
    local remote_resource="ubuntu/modules/${script_filename}";
    rm -fv ${vbox_temp}/${script_filename} 2>/dev/null;
    # check_status $?;
    curl --silent \
         --output ${vbox_temp}/${script_filename} \
         https://${github_content}/${github_repo}/master/${remote_resource};
    check_status $?;
    while [[ ! -e ${vbox_temp}/${script_filename} ]]; do
      echo -e '.'; sleep 1;
    done; echo -e;
    check_status $?;
    ssh ${vm_name} -C 'bash -s' \
      < ${vbox_temp}/${script_filename} 2>/dev/null;
    check_status $?;
    return 0;
  }; alias preinst-packages='preinst_packages';

## -----------------------------------------------------------------------------
## Objective: Post-Installing Core Packages
function postinst_packages () {
    local script_filename="ubuntu-postinstall.shell";
    local remote_resource="ubuntu/modules/${script_filename}";
    rm -fv ${vbox_temp}/${script_filename} 2>/dev/null;
    # check_status $?;
    curl --silent \
         --output ${vbox_temp}/${script_filename} \
         https://${github_content}/${github_repo}/master/${remote_resource};
    check_status $?;
    while [[ ! -e ${vbox_temp}/${script_filename} ]]; do
      echo -e '.'; sleep 1;
    done; echo -e;
    check_status $?;
    ssh ${vm_name} -C 'bash -' \
      < ${vbox_temp}/${script_filename} 2>/dev/null;
    check_status $?;
    return 0;
  }; alias postinst-packages='postinst_packages';

## -----------------------------------------------------------------------------
function virtualbox_appliance () {
    local oIFS="${IFS}";
    local ignore_password='false';
    for xitem in "${@}"; do
      IFS='='; set `echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'`
      ## Required Parameters:
      [[ ${1#*\--} = "vm-name" ]] && local vm_name="${2}";
      [[ ${1#*\--} = "account" ]] && local devops_account="${2}";
      [[ ${1#*\--} = "password" ]] && {
          if [[ ${ignore_password} == 'false' ]]; then
            local devops_password="${2}";
            local password_option="--password=";
            password_option+="${devops_password}";
          fi;
        };
      [[ ${1#*\--} = "secret" ]] && {
          local devops_passwdfile="$(
              echo -e "${2}" | sed -e "s|^\(~\)\(.*\)|${HOME}\2|"
            )";
          if [[ -e "${devops_passwdfile}" ]]; then
                  local devops_password="$(
                      cat "${devops_passwdfile}"
                    )";
                  local password_option="--password-file=";
                  password_option+="${devops_passwdfile}";
                  ignore_password='true';
            else  newline;
                  echo -e "Warning: Password File was not found! ";
          fi;
        };
      ## Optional Parameters:
      [[ ${1#*\--} = "appliance" ]] && local virtual_machine="${2}";
      [[ ${1#*\--} = "cache" ]] && local user_local="${2}";
      [[ ${1#*\--} = "configure" ]] && local configuration='true';
      [[ ${1#*\--} = "create" ]] && local create_machine='true';
      [[ ${1#*\--} = "delete" ]] && local delete_machine='true';
      [[ ${1#*\--} = "deploy" ]] && local unattended_install='true';
      [[ ${1#*\--} = "install" ]] && local install_packages='true';
      [[ ${1#*\--} = "iso-file" ]] && {
          local iso_filename="$(
              echo -e "${2}" | sed -e "s|^\(~\)\(.*\)|${HOME}\2|"
            )";
          [[ ! -e ${iso_filename} ]] && unset iso_filename;
        };
      [[ ${1#*\--} = "packages" ]] && local custom_packages="${2}";
      [[ ${1#*\--} = "patch" ]] && local patch_files='true';
      [[ ${1#*\--} = "projects" ]] && local virtualbox_projects="${2}";
      [[ ${1#*\--} = "provision" ]] && local provisioning='true';
      [[ ${1#*\--} = "ssh-key" ]] && local sshkey_access="${2}";
      [[ ${1#*\--} = "start" ]] && local start_machine='true';
      ## Assistance Parameters:
      [[ ${1#*\--} = "example" ]] && local example_mode='true';
      [[ ${1#*\--} = "wizard" ]] && local wizard_mode='true';
      [[ ${1#*\--} = "info" ]] && local info_mode='true';
      [[ ${1#*\--} = "help" ]] && local assistance='true';
    done; IFS="${oIFS}";
    local oIFS="${IFS}"; IFS=$'\n';
    ## Prividing operational assistance (helper)
    if [[ ( ${assistance} == 'true' )   || \
          ( ${example_mode} == 'true' ) || \
          ( ${wizard_mode} == 'true' )  || \
          ( ${info_mode} == 'true' )
      ]]; then
      ## JSON source and object:
      local script_helper="${HOME}/.local/bin/script-helper.shell";
      if [[ -e ${script_helper} ]]; then
              source ${script_helper};
              script_helper --caller="${script_file}" \
                            --example=${example_mode} \
                            --wizard=${wizard_mode} \
                            --info=${info_mode} \
              ;
              return 6;
        else  newline;
              echo -e "Warning: Script Helper was not found ! ";
              newline;
              return 7;
      fi;
    fi;
    ## -------------------------------------------------------------------------
    ## Objective: System Operational Requirements
    [[ ${#user_local} -eq 0 ]] && {
        export user_local="${HOME}/.local";
        mkdir -p "${user_local}";
      };
    ## Temporary folder/container:
    export local_temp="${user_local}/tmp";
    export vbox_temp="${local_temp}/vbox";
    export vbox_shared="${vbox_temp}/shared";
    ## Constructing a Vagrant Shared folder to exchange content
    mkdir -p "${vbox_shared}";
    ## Target VirtualBox Home folder:
    [[ ${#virtualbox_projects} -eq 0 ]] && {
        export virtualbox_projects="${HOME}/.virtualization/virtualbox";
        mkdir -p "${virtualbox_projects}";
      };
    ## -------------------------------------------------------------------------
    ## Processing Function Input Parameters
    if [[ ${#vm_name} -eq 0 ]]; then
      user_input="Virtual Machine name: ";
      newline; read -p "${user_input}" response;
      if [[ ${#response} -gt 0 ]]; then
              export vm_name="$(
                  echo -e ${response} | tr '[[:upper:]]' '[[:lower:]]'
                )";
        else  ## Generating devops-(timestamp) name
              local vm_name="devops-${timestamp}";
              newline;
              echo -e "Warning: Appliance's name [${vm_name}] timestamp-based! ";
              newline;
      fi;
    fi;
    ## Virtual Machine hostname
    [[ ${#virtual_machine} -eq 0 ]] && \
       export virtual_machine="devops-console";
    ## e.g.: ubuntu-22.04.1-desktop-amd64.iso
    if [[ ${unattended_install} == 'true' ]]; then
      ## Processing ISO filename (location)
      local missing_isofile="Warning: No Installation ISO file was provided! ";
      if [[ ${#iso_filename} -eq 0 ]]; then
              echo -e "${missing_isofile}";
              ## Installation media (DVD ISO):
              user_input="Installation ISO location: ";
              newline; read -p "${user_input}" iso_filename;
              local fixing_filepath="$(
                  echo -e "${iso_filename}" \
                     | sed -e "s|^\(~\)\(.*\)|${HOME}\2|"
                )";
              iso_filename="${fixing_filepath}";
              if [[ ${#iso_filename} -eq 0 ]]; then
                newline;
                echo -e "Warning: Unable to continue! ";
                newline;
                return 9;
              fi;
        else  [[ ! -e ${iso_filename} ]] && {
                  newline;
                  echo -e "${missing_isofile}";
                  return 10;
                };
      fi;
    fi;
    [[ ${#devops_account} -eq 0 ]] && {
        export devops_account='devops';
        newline;
        echo -en "Warning: Using default ";
        echo -e  "'${devops_account}' service account! ";
        newline;
      };
    [[ ${#devops_password} -eq 0 ]] && {
        export devops_password="$(password)";
        # newline;
        # echo -en "Warning: Using default ";
        # echo -e  "'${devops_password}' account password! ";
        # newline;
      };
    [[ ${#configuration} -eq 0 ]] && {
        export configuration='false';
        ## newline;
        ## echo -en "Warning: Configuration ${provisioning} ! ";
        ## newline;
      };
    [[ ${#provisioning} -eq 0 ]] && {
        export provisioning='false';
        # newline;
        # echo -en "Warning: Provisioning ${provisioning} ! ";
        # newline;
      };
    local vm_location="";
    if [[ ${unattended_install} == 'true' ]]; then
            ## Collecting Virtual Machinen OS Type:
            declare -a vm_ostype="$(
                VBoxManage list ostypes \
                | egrep "^(ID:)([[:blank:]]*)(Ubuntu22.*)(LTS).*(64)$" \
                | awk '{print $2}'
              )";
            ## Create the virtual machine.
            declare -a response=($(
                VBoxManage createvm \
                         --name "${vm_name}" \
                         --ostype "${vm_ostype}" \
                         --register
              ));
            ## Virtual machine 'Ubuntu22_LTS_64' is created and registered.
            vm_registration="${response[0]}";
            ## UUID: f6fc21d3-7a3a-4490-a5fc-7d26aca20e09
            vm_uuid="${response[1]/UUID: /}";
            ## Settings file: '${virttualbox}/***/***.vbox'
            vm_settings="$(
                echo -e ${response[2]} \
                   | sed -e "s|^\(Settings file: '\)\(.*\)\(\'\)$|\2|"
              )";
            ## Extracting Virtual Machine Location and VBox-file:
            vm_location="$( dirname "${vm_settings}" )";
            vm_vboxfile="$( basename "${vm_settings}" )";
      else  vm_location="${virtualbox_projects}/${vm_name}";
    fi;
    local vm_vboxfile="${vm_location}/${vm_name}.vbox";
    [[ ${provisioning} == 'true' ]] && {
        ## Processing Virtual Machine Storage:
        vboxmanage_storage --vm-name="${vm_name}" \
                           --vm-location="${vm_location}" \
                           --iso-file="${iso_filename}" \
        ; check_status;
        sleep 1;
        ## Processing Virtual Machine Aditional Configurations
        vboxmanage_configvm --vm-name="${vm_name}" \
                            --memory='4096' \
                            --cpus='4' \
                            --vram='128' \
        ; check_status;
        sleep 1;
        ## Processing Virtual Machine Multimedia Configurations
        vboxmanage_multimedia --vm-name="${vm_name}" \
                              --resolution='1920x1080' \
        ; check_status;
        sleep 1;
        ## Processing Virtual Machine Networking Configurations:
        vboxmanage_networking --vm-name="${vm_name}" \
                              --nic-type='82545EM' \
                              --bridged='1,en0: Ethernet' \
                              --hostonly-network='2,HostNetwork' \
                              --nat-network='3,NatNetwork' \
                              --nat-only='4' \
        ; check_status;
        sleep 1;
        ## Create Shared Folder: (Host: /tmp/shared) + (Guest: /shared)
        VBoxManage sharedfolder add ${vm_name} \
                              --name=shared \
                              --hostpath=/tmp/shared \
                              --automount \
                              --auto-mount-point=/shared \
        ; check_status;
        sleep 1;
      };
    ## Unattended Installation
    [[ ${unattended_install} == 'true' ]] && {
        newline;
        echo -e "Generating VirtualBox Un-Attended Installation";
        VBoxManage unattended install ${vm_name} \
                 --iso="${iso_filename}" \
                 --user="${devops_account}" \
                 ${password_option} \
                 --full-user-name="DevOps Engineer" \
                 --install-additions \
                 --locale="en_US" \
                 --country="US" \
                 --time-zone="utc" \
                 --hostname="${vm_name}.local" \
                 --language="en" \
        ;
        check_status;
        ## Pre-Configuring patching files
        [[ ${patch_files} == 'true' ]] && {
            declare -a targets=(
                preseed.cfg
                vboxpostinstall.sh
              );
            ## -----------------------------------------------------------------
            ## Configuring target-configs with custom settings.
            for target in ${targets[@]}; do
              ## Configuring each target with custom settings.
              export patch_template="patch-${target}";
              export remote_resource="${virtualbox_platform}/${patch_template}";
              rm -fv ${vbox_temp}/${patch_template} 2>/dev/null;
              # check_status;
              curl --silent \
                   --output ${vbox_temp}/${patch_template} \
                   https://${github_content}/${github_repo}/${remote_resource};
              check_status;
              while [[ ! -e ${vbox_temp}/${patch_template} ]]; do
                echo -e '.'; sleep 1;
              done; echo -e;
              check_status;
              if [[ ! -e ${vbox_temp}/${patch_template} ]]; then
                newline;
                echo -e "Warning: ${vbox_temp}/${patch_template} is missing! ";
                return 11;
              fi;
              ## Correcting auto-generated presets
              if [[ ${patch_template} == 'patch-preseed.cfg' ]]; then
                sed -i '' \
                    -e 's|^\(.*/username string \)\(.*\)$|\1{{ service-account }}|g' \
                    -e 's|^\(.*/user-password.*password \)\(.*\)$|\1{{ devops-password }}|g' \
                    -e 's|^\(.*/root-password.*password \)\(.*\)$|\1{{ root-password }}|g' \
                    -e 's|^\(.*/user-default-groups string \)\(.*\)$|\1sudo|g' \
                    ${vm_location}/Unattended-*-${target};
                check_status;
                sed -i '' \
                    -e "s|{{ service-account }}|${devops_account}|g" \
                    -e "s|{{ devops-password }}|${devops_password}|g" \
                    -e "s|{{ root-password }}|${root_password}|g" \
                    ${vm_location}/Unattended-*-${target};
                check_status;
                newline;
                echo -e "Notice: Listing modifications (${patch_template})";
                egrep --before-context=2 \
                      --after-context=2 \
                "^d-i passwd/.*$" ${vm_location}/Unattended-*-${target} \
                | sed -e "s|${devops_password}|***|" \
                      -e "s|${root_password}|***|";
              fi;
              if [[ ${patch_template} == 'patch-vboxpostinstall.sh' ]]; then
                local target_entry="usermod -a -G vboxsf ";
                sed -i '' \
                    -e "s|^\(.*${target_entry}\)\(.*\)$|\1\"{{ service-account }}\"|" \
                    ${vm_location}/Unattended-*-${target};
                ## Patching Pre-Seed Configurations:
                patch ${vm_location}/Unattended-*-${target} \
                    < ${vbox_temp}/${patch_template};
                check_status;
                sed -i '' \
                    -e "s|{{ service-account }}|${devops_account}|g" \
                    ${vm_location}/Unattended-*-${target};
                check_status;
                newline;
                echo -e "Notice: Listing modifications (${patch_template})";
                egrep --before-context=22 \
                      --after-context=4 \
                "^.*usermod -a -G vboxsf .*$" ${vm_location}/Unattended-*-${target};
              fi;
            done;
          };
      };
    [[ ${configuration} == 'true' ]] && {
        vboxmanage_interface --vm-name="${vm_name}" \
                             --ssh-key="${sshkey_access}";
        check_status;
        newline;
        echo -e "Notice: Transferring SSH Access Key to Guest System ...";
        ssh-copy-id -i ${sshkey_access} \
                    -o StrictHostKeyChecking=no \
                    ${devops_account}@${vm_name};
        check_status;
        ## Enabling Passwordless Access
        sudoers_privileges;
        check_status;
        sudoers_autologin;
        check_status;
        ## Remote SSH Access
        ssh ${vm_name} -C 'sudo systemctl status ssh' 2>/dev/null;
        check_status;
        newline;
        echo -e "Warning: Disabling Service Account password! ";
        ssh ${vm_name} -C "ssh sudo passwd --delete ${devops_account}";
        check_status;
      };
    [[ ${install_packages} == 'true' ]] && {
        ## Installing DevOps Packages.
        preinst_packages;
        check_status;
        postinst_packages;
        check_status;
      };
    [[ ${start_machine} == 'true' ]] && {
        ## Starting VirtualBox Virtual Machine.
        VBoxManage startvm ${vm_name};
        check_status;
      };
    [[ ${delete_machine} == 'true' ]] && {
        ## Starting VirtualBox Virtual Machine.
        VBoxManage controlvm ${vm_name} acpipowerbutton;
        check_status;
        VBoxManage unregistervm --delete ${vm_name};
        check_status;
        return 12;
      };
    IFS="${oIFS}";
    return 0;
  }; alias virtualbox-appliance='virtualbox_appliance';

virtualbox_appliance ${@}

## -------------------------------------------------------------------------
## Objective: Script & Environment Variables
## SSH Access authorized keys:
## export authorized_keys="/home/${devops_account}/.ssh/authorized_keys";
