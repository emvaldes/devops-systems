#!/usr/bin/env bash

function load_modules () {
    declare -a xfiles=(
        'devops-tools.shell'
        'user-manage.shell'
        'vbox-manage.shell'
      );
    local resources="$(pwd)/resources/";
    for xfile in "${xfiles[@]}"; do
      target="${resources}${xfile}";
      if [[ -e ${target} ]]; then source ${target};
        else  echo -e "Warning: [${target}] was not found! ";
              exit 1;
      fi;
    done;
    source ${resources}/*.variables 2>/dev/null;
    return 0;
  }; load_modules;

## -----------------------------------------------------------------------------
function virtualbox_appliance () {
    local oIFS="${IFS}";
    local ignore_password='false';
    for xitem in "${@}"; do
      IFS='='; set `echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'`
      ## Required Parameters:
      [[ ${1#*\--} = "instance" ]] && local virtual_machine="${2}";
      [[ ${1#*\--} = "account" ]] && local devops_account="${2}";
      [[ ${1#*\--} = "password" ]] && {
          if [[ ${ignore_password} == 'false' ]]; then
            local devops_password="${2}";
            local password_option="--password=";
            password_option+="${devops_password}";
          fi;
        };
      [[ ${1#*\--} = "secret" ]] && {
          local devops_passwdfile="$(
              echo -e "${2}" | sed -e "s|^\(~\)\(.*\)|${HOME}\2|"
            )";
          if [[ -e "${devops_passwdfile}" ]]; then
                  local devops_password="$(
                      cat "${devops_passwdfile}"
                    )";
                  local password_option="--password-file=";
                  password_option+="${devops_passwdfile}";
                  ignore_password='true';
            else  newline;
                  echo -e "Warning: Password File was not found! ";
                  newline;
          fi;
        };
      ## Optional Parameters:
      [[ ${1#*\--} = "instance" ]] && local virtual_machine="${2}";
      [[ ${1#*\--} = "cache" ]] && local user_local="${2}";
      [[ ${1#*\--} = "configure" ]] && local configuration='true';
      [[ ${1#*\--} = "create" ]] && local create_machine='true';
      [[ ${1#*\--} = "delete" ]] && local delete_machine='true';
      [[ ${1#*\--} = "deploy" ]] && local unattended_install='true';
      [[ ${1#*\--} = "install" ]] && local install_packages='true';
      [[ ${1#*\--} = "iso-file" ]] && {
          local iso_filename="$(
              echo -e "${2}" | sed -e "s|^\(~\)\(.*\)|${HOME}\2|"
            )";
          [[ ! -e ${iso_filename} ]] && unset iso_filename;
        };
      [[ ${1#*\--} = "packages" ]] && local custom_packages="${2}";
      [[ ${1#*\--} = "patch" ]] && local patch_files='true';
      [[ ${1#*\--} = "projects" ]] && local virtualbox_projects="${2}";
      [[ ${1#*\--} = "provision" ]] && local provisioning='true';
      [[ ${1#*\--} = "ssh-key" ]] && {
          local sshkey_access="$(
              echo -e "${2}" | sed -e "s|^\(~\)\(.*\)|${HOME}\2|"
            )";
        };
      [[ ${1#*\--} = "start" ]] && local start_machine='true';
      ## Assistance Parameters:
      [[ ${1#*\--} = "example" ]] && local example_mode='true';
      [[ ${1#*\--} = "wizard" ]] && local wizard_mode='true';
      [[ ${1#*\--} = "info" ]] && local info_mode='true';
      [[ ${1#*\--} = "help" ]] && local assistance='true';
    done; IFS="${oIFS}";
    local oIFS="${IFS}"; IFS=$'\n';
    ## Prividing operational assistance (helper)
    if [[ ( ${assistance} == 'true' )   || \
          ( ${example_mode} == 'true' ) || \
          ( ${wizard_mode} == 'true' )  || \
          ( ${info_mode} == 'true' )
      ]]; then
      ## JSON source and object:
      local script_helper="${HOME}/.local/bin/script-helper.shell";
      if [[ -e ${script_helper} ]]; then
              source ${script_helper};
              script_helper --caller="${script_file}" \
                            --example=${example_mode} \
                            --wizard=${wizard_mode} \
                            --info=${info_mode} \
              ;
              return 1;
        else  newline;
              echo -e "Warning: Script Helper was not found ! ";
              newline;
              return 2;
      fi;
    fi;
    ## -------------------------------------------------------------------------
    ## Objective: System Operational Requirements
    [[ ${#user_local} -eq 0 ]] && {
        export user_local="${HOME}/.local";
        mkdir -p "${user_local}";
      };
    ## Temporary folder/container:
    export local_temp="${user_local}/tmp";
    export vbox_temp="${local_temp}/vbox";
    export vbox_shared="${vbox_temp}/shared";
    ## Constructing a Vagrant Shared folder to exchange content
    mkdir -p "${vbox_shared}";
    ## Target VirtualBox Home folder:
    [[ ${#virtualbox_projects} -eq 0 ]] && {
        export virtualbox_projects="${HOME}/.virtualization/virtualbox";
        mkdir -p "${virtualbox_projects}";
      };
    ## -------------------------------------------------------------------------
    ## Processing Function Input Parameters
    if [[ ${#virtual_machine} -eq 0 ]]; then
      user_input="Virtual Machine name: ";
      newline; read -p "${user_input}" response;
      if [[ ${#response} -gt 0 ]]; then
              export virtual_machine="$(
                  echo -e ${response} | tr '[[:upper:]]' '[[:lower:]]'
                )";
        else  ## Generating devops-(timestamp) name
              local virtual_machine="devops-${timestamp}";
              newline;
              echo -e "Warning: Appliance's name [${virtual_machine}] timestamp-based! ";
              newline;
      fi;
    fi;
    ## Virtual Machine hostname
    [[ ${#virtual_machine} -eq 0 ]] && \
       export virtual_machine="devops-console";
    ## e.g.: ubuntu-22.04.1-desktop-amd64.iso
    if [[ ${unattended_install} == 'true' ]]; then
      ## Processing ISO filename (location)
      local missing_isofile="Warning: No Installation ISO file was provided! ";
      if [[ ${#iso_filename} -eq 0 ]]; then
              echo -e "${missing_isofile}";
              ## Installation media (DVD ISO):
              user_input="Installation ISO location: ";
              newline; read -p "${user_input}" iso_filename;
              local fixing_filepath="$(
                  echo -e "${iso_filename}" \
                     | sed -e "s|^\(~\)\(.*\)|${HOME}\2|"
                )";
              iso_filename="${fixing_filepath}";
              if [[ ${#iso_filename} -eq 0 ]]; then
                newline;
                echo -e "Warning: Unable to continue! ";
                newline;
                return 3;
              fi;
        else  [[ ! -e ${iso_filename} ]] && {
                  newline;
                  echo -e "${missing_isofile}";
                  return 4;
                };
      fi;
    fi;
    [[ ${#devops_account} -eq 0 ]] && {
        export devops_account='devops';
        newline;
        echo -en "Warning: Using default ";
        echo -e  "'${devops_account}' service account! ";
        newline;
      };
    [[ ${#devops_password} -eq 0 ]] && {
        export devops_password="$(password)";
        newline;
        echo -en "Warning: Using custom ";
        echo -e  "'${devops_password}' account password! ";
        newline;
      };
    if [[ ${#configuration} -eq 0 ]]; then
            export configuration='false';
            ## newline;
            ## echo -en "Warning: Configuration ${provisioning} ! ";
            ## newline;
      else  local missing_sshkey="Warning: SSH Access Key (file) was not found! ";
            if [[ ${#sshkey_access} -eq 0 ]]; then
              echo -e "${missing_sshkey}";
              ## Processing SSH Access Key file
              user_input="SSH Access Key (file): ";
              newline; read -p "${user_input}" response;
              local fixing_filepath="$(
                  echo -e "${response}" \
                     | sed -e "s|^\(~\)\(.*\)|${HOME}\2|"
                )";
              sshkey_access="${fixing_filepath}";
            fi;
            if [[ ! -e ${sshkey_access} ]]; then
              newline;
              echo -e "${missing_sshkey}";
              return 5;
            fi;
    fi;
    [[ ${#provisioning} -eq 0 ]] && {
        export provisioning='false';
        # newline;
        # echo -en "Warning: Provisioning ${provisioning} ! ";
        # newline;
      };
    local instance_location="";
    if [[ ${unattended_install} == 'true' ]]; then
            ## Collecting Virtual Machinen OS Type:
            declare -a instance_ostype="$(
                VBoxManage list ostypes \
                | egrep "^(ID:)([[:blank:]]*)(Ubuntu22.*)(LTS).*(64)$" \
                | awk '{print $2}'
              )";
            ## Create the virtual machine.
            declare -a response=($(
                VBoxManage createvm \
                         --name "${virtual_machine}" \
                         --ostype "${instance_ostype}" \
                         --register
              ));
            ## Virtual machine 'Ubuntu22_LTS_64' is created and registered.
            instance_registration="${response[0]}";
            ## UUID: f6fc21d3-7a3a-4490-a5fc-7d26aca20e09
            instance_uuid="${response[1]/UUID: /}";
            ## Settings file: '${virttualbox}/***/***.vbox'
            instance_settings="$(
                echo -e ${response[2]} \
                   | sed -e "s|^\(Settings file: '\)\(.*\)\(\'\)$|\2|"
              )";
            ## Extracting Virtual Machine Location and VBox-file:
            instance_location="$( dirname "${instance_settings}" )";
            instance_vboxfile="$( basename "${instance_settings}" )";
      else  instance_location="${virtualbox_projects}/${virtual_machine}";
    fi;
    local instance_vboxfile="${instance_location}/${virtual_machine}.vbox";
    [[ ${provisioning} == 'true' ]] && {
        ## Processing Virtual Machine Storage:
        vboxmanage_storage --vm-name="${virtual_machine}" \
                           --location="${instance_location}" \
                           --iso-file="${iso_filename}" \
        ; check_status;
        sleep 1;
        ## Processing Virtual Machine Aditional Configurations
        vboxmanage_configvm --vm-name="${virtual_machine}" \
                            --memory='4096' \
                            --cpus='4' \
                            --vram='128' \
        ; check_status;
        sleep 1;
        ## Processing Virtual Machine Multimedia Configurations
        vboxmanage_multimedia --vm-name="${virtual_machine}" \
                              --resolution='1920x1080' \
        ; check_status;
        sleep 1;
        ## Processing Virtual Machine Networking Configurations:
        vboxmanage_networking --vm-name="${virtual_machine}" \
                              --nic-type='82545EM' \
                              --bridged='1,en0: Ethernet' \
                              --hostonly-network='2,HostNetwork' \
                              --nat-network='3,NatNetwork' \
                              --nat-only='4' \
        ; check_status;
        sleep 1;
        ## Objective: Provision a deployment repository (Guest)
        ##            A manual step to be performed by the end-user at the Host
        # ## Create Shared Folder: (Host: /tmp/shared) + (Guest: /shared)
        vboxmanage_sharedfolders --name="shared" \
                                 --host-path="/tmp/shared" \
                                 --guest-path="/shared";
        # # ## Create Shared Folder: (Host: /tmp/deploy) + (Guest: /deploy)
        # vboxmanage_sharedfolders --name="deploy" \
        #                          --host-path="/tmp/deploy" \
        #                          --guest-path="/deploy";
      };
    ## Unattended Installation
    [[ ${unattended_install} == 'true' ]] && {
        ## Listing any existing Unattended* files
        ls -al ${instance_location}/Unattended-* 2>/dev/null;
        ## Removing any existing Unattended* files
        rm -fv ${instance_location}/Unattended-* 2>/dev/null;
        newline;
        echo -e "Generating VirtualBox Un-Attended Installation";
        VBoxManage unattended install ${virtual_machine} \
                 --iso="${iso_filename}" \
                 --user="${devops_account}" \
                 ${password_option} \
                 --full-user-name="DevOps Engineer" \
                 --install-additions \
                 --locale="en_US" \
                 --country="US" \
                 --time-zone="utc" \
                 --hostname="${virtual_machine}.local" \
                 --language="en" \
        ;
        check_status;
        ## Pre-Configuring patching files
        [[ ${patch_files} == 'true' ]] && {
            declare -a targets=(
                preseed.cfg
                vboxpostinstall.sh
              );
            ## -----------------------------------------------------------------
            ## Configuring target-configs with custom settings.
            for target in ${targets[@]}; do
              ## Configuring each target with custom settings.
              export patch_template="patch-${target}";
              export remote_resource="${virtualbox_platform}/modules/${patch_template}";
              rm -fv ${vbox_temp}/${patch_template} 2>/dev/null;
              # check_status;
              curl --silent \
                   --output ${vbox_temp}/${patch_template} \
                   https://${github_content}/${github_repo}/${remote_resource};
              check_status;
              while [[ ! -e ${vbox_temp}/${patch_template} ]]; do
                echo -e '.'; sleep 1;
              done; echo -e;
              check_status;
              if [[ ! -e ${vbox_temp}/${patch_template} ]]; then
                newline;
                echo -e "Warning: ${vbox_temp}/${patch_template} is missing! ";
                newline;
                return 6;
              fi;
              local system_configuration="${instance_location}/Unattended-*-${target}";
              ## Creating symlink for shorter output:
              local active_location="$(pwd)";
              ## Correcting auto-generated presets
              if [[ ${patch_template} == 'patch-preseed.cfg' ]]; then
                sed -i '' \
                    -e 's|^\(.*/username string \)\(.*\)$|\1{{ service-account }}|g' \
                    -e 's|^\(.*/user-password.*password \)\(.*\)$|\1{{ devops-password }}|g' \
                    -e 's|^\(.*/root-password.*password \)\(.*\)$|\1{{ root-password }}|g' \
                    -e 's|^\(.*/user-default-groups string \)\(.*\)$|\1sudo|g' \
                    ${system_configuration};
                check_status;
                sed -i '' \
                    -e "s|{{ service-account }}|${devops_account}|g" \
                    -e "s|{{ devops-password }}|${devops_password}|g" \
                    -e "s|{{ root-password }}|${root_password}|g" \
                    ${system_configuration};
                check_status;
                newline;
                echo -e "Notice: Listing modifications (${patch_template})";
                egrep --before-context=2 \
                      --after-context=2 \
                "^d-i passwd/.*$" ${system_configuration} \
                | sed -e "s|${devops_password}|***|" \
                      -e "s|${root_password}|***|";
              fi;
              if [[ ${patch_template} == 'patch-vboxpostinstall.sh' ]]; then
                local target_entry="usermod -a -G vboxsf ";
                sed -i '' \
                    -e "s|^\(.*${target_entry}\)\(.*\)$|\1\"{{ service-account }}\"|" \
                    ${system_configuration};
                ## Patching Deployment Configurations:
                ##  Warning: Reversed (or previously applied) patch detected!
                ##           Assume -R? [y] y
                ## Solution: --batch suppresses questions and some assumptions.
                patch --batch \
                      ${system_configuration} < ${vbox_temp}/${patch_template};
                check_status;
                sed -i '' \
                    -e "s|{{ service-account }}|${devops_account}|g" \
                    ${system_configuration};
                check_status;
                echo -e "Notice: Listing modifications (${patch_template})";
                egrep --before-context=22 \
                      --after-context=4 \
                "^.*usermod -a -G vboxsf .*$" ${system_configuration};
              fi;
            done;
            cd ${instance_location};
            for target in ${targets[@]}; do
              ## Warning: The creation of this local symlink has to occur after
              ##          patching is performed. Otherwise it seems to break.
              ln -s ./Unattended-*-${target} ./patch-${target};
              rm -v ./Unattended-*-${target}.orig 2>/dev/null;
            done;
            cd "${active_location}" 2>/dev/null;
          };
      };
    [[ ${configuration} == 'true' ]] && {
        ## Identifying the VirtualBox virtual_machine's IP Address
        ## Warning: If Virtual Machine name is not valid this will fail.
        ##          VBoxManage: error: Could not find a registered machine named ...
        local status=0;
        declare -a machine_details=($(
            VBoxManage showvminfo --details ${virtual_machine} \
            | grep bridged;
            echo -e ${?};
          ));
        # newline; echo -e "Bridged Network:\n${machine_details[@]}";
        if [[ ${machine_details[-1]} -eq 0 ]]; then
                local regex='^';
                regex+='\(NIC.*\)\(MAC\:\ \)';
                regex+='\([a-zA-Z0-9]*\)';
                regex+="\(\,.*Bridged.*\'\)";
                regex+='\(.*\)';
                regex+="\(\'\,.*\)";
                regex+='$';
                declare -a bridged_network=($(
                    echo -e "${machine_details[@]}" \
                       | sed -e "s|${regex}|\3\n\5|"
                  ));
                local bridged_macaddr="$(
                    echo -e "${bridged_network[0]}" \
                       | fold -w2 \
                       | tr '\n' ':' | tr '[[:upper:]]' '[[:lower:]]' \
                       | sed -e 's|\:$||'
                  )";  ## -e 's|00|0|g' -e 's|\(0\)\([0-9]\)|\2|g'
                # newline; echo -e "Bridged MAC Address: ${bridged_macaddr}";
                local bridged_interface="${bridged_network[1]%\:*}";
                # newline; echo -e "Bridged Interface: ${bridged_interface}";
                vboxmanage_interface --vm-name="${virtual_machine}" \
                                     --ssh-key="${sshkey_access}" \
                                     --mac-addr="${bridged_macaddr}" \
                ; check_status;
                # newline; echo -e "IP Address: ${ipaddr}";
                ## -------------------------------------------------------------
                ## Note: I have hashed my ~/.ssh/known_hosts file.
                #        $ ssh-keygen -H ;
                # /Users/emvaldes/.ssh/known_hosts updated.
                # Original contents retained as /Users/emvaldes/.ssh/known_hosts.old
                # WARNING: /Users/emvaldes/.ssh/known_hosts.old contains unhashed entries
                # Delete this file to ensure privacy of hostnames
                ## -------------------------------------------------------------
                ## -H -F hostname : Search for the hashed specified hostname in
                ## a known_hosts file, listing any occurrences found.
                declare -a check_hostexist=($(
                    ssh-keygen -H -F ${ipaddr}
                  ));
                if [[ ${#check_hostexist[@]} -gt 0 ]]; then
                  ## -H -R hostname : Removes all hashed hosts (keys) belonging to
                  ## hostname from a known_hosts file.
                  ssh-keygen -R ${ipaddr};
                fi;
                newline;
                echo -e "Notice: Transferring SSH Access Key to Guest System ...";
                ## Configuring each target with custom settings.
                export expect_template="ssh-copy-id.expect";
                export remote_resource="${virtualbox_platform}/modules/${expect_template}";
                rm -fv ${vbox_temp}/${expect_template} 2>/dev/null;
                # check_status;
                curl --silent \
                     --output ${vbox_temp}/${expect_template} \
                     https://${github_content}/${github_repo}/${remote_resource};
                check_status;
                while [[ ! -e ${vbox_temp}/${expect_template} ]]; do
                  echo -e '.'; sleep 1;
                done; echo -e;
                check_status;
                if [[ ! -e ${vbox_temp}/${expect_template} ]]; then
                  newline;
                  echo -e "Warning: ${vbox_temp}/${expect_template} is missing! ";
                  newline;
                  return 7;
                fi;
                $(which expect) -c "$(
                    cat ${vbox_temp}/${expect_template} \
                    | sed -e "s|{{ sshkey_access }}|${sshkey_access}|g" \
                          -e "s|{{ devops_account }}|${devops_account}|g" \
                          -e "s|{{ network_address }}|${ipaddr}|g" \
                          -e "s|{{ devops_password }}|${devops_password}|g"
                  )";
                check_status;
                ## Enabling Passwordless Access
                sudoers_privileges;
                check_status;
                sudoers_autologin;
                check_status;
                ## Remote SSH Access
                ssh ${virtual_machine} -C \
                  "sudo systemctl status ssh" 2>/dev/null;
                check_status;
                newline;
                echo -e "Warning: Disabling Service Account password! ";
                newline;
                ssh ${virtual_machine} -C \
                  "ssh sudo passwd --delete ${devops_account}";
                check_status;
          else  newline;
                echo -e "Warning: Virtual Machine is invalid! ";
                newline;
                return 8;
        fi;
      };
    [[ ${install_packages} == 'true' ]] && {
        ## Installing DevOps Packages.
        preinst_packages;
        check_status;
        postinst_packages;
        check_status;
      };
    [[ ${start_machine} == 'true' ]] && {
        ## Starting VirtualBox Virtual Machine.
        VBoxManage startvm ${virtual_machine};
        check_status;
      };
    [[ ${delete_machine} == 'true' ]] && {
        ## Starting VirtualBox Virtual Machine.
        VBoxManage controlvm ${virtual_machine} acpipowerbutton;
        check_status;
        VBoxManage unregistervm --delete ${virtual_machine};
        check_status;
        return 9;
      };
    IFS="${oIFS}";
    return 0;
  }; alias virtualbox-appliance='virtualbox_appliance';

virtualbox_appliance ${@}

## -------------------------------------------------------------------------
## Objective: Script & Environment Variables
## SSH Access authorized keys:
## export authorized_keys="/home/${devops_account}/.ssh/authorized_keys";

## -----------------------------------------------------------------------------
## Reference: https://www.virtualbox.org/manual/UserManual.html
              #unattended-guest-install-example
## -----------------------------------------------------------------------------
