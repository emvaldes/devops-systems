#!/usr/bin/env bash

function load_modules () {
    declare -a xfiles=(
        'devops-tools.shell'
        'user-manage.shell'
        'vbox-manage.shell'
      );
    local resources="$(pwd)/resources/";
    for xfile in "${xfiles[@]}"; do
      target="${resources}${xfile}";
      if [[ -e ${target} ]]; then source ${target};
        else  echo -e  "[${target}] was not found";
              exit 1;
      fi;
    done;
    source ${resources}/*.variables 2>/dev/null;
    return 0;
  }; load_modules;

## -----------------------------------------------------------------------------
function virtualbox_appliance () {
    local oIFS="${IFS}";
    local ignore_password='false';
    for xitem in "${@}"; do
      IFS='='; set `echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'`
      ## Required Parameters:
      [[ ${1#*\--} = "instance" ]] && local virtual_machine="${2}";
      [[ ${1#*\--} = "account" ]] && local devops_account="${2}";
      if [[ ${1#*\--} = "password" ]]; then
        if [[ ${ignore_password} == 'false' ]]; then
          local devops_password="${2}";
          local password_option="--password=";
          password_option+="${devops_password}";
        fi;
      fi;
      if [[ ${1#*\--} = "secret" ]]; then
        local devops_passwdfile="$(
            message "${2}" | sed -e "s|^\(~\)\(.*\)|${HOME}\2|"
          )";
        if [[ -e "${devops_passwdfile}" ]]; then
                local devops_password="$(
                    cat "${devops_passwdfile}"
                  )";
                local password_option="--password-file=";
                password_option+="${devops_passwdfile}";
                ignore_password='true';
          else  warning "Password File was not found";
        fi;
      fi;
      ## Optional Parameters:
      [[ ${1#*\--} = "instance" ]] && local virtual_machine="${2}";
      [[ ${1#*\--} = "cache" ]] && local user_local="${2}";
      [[ ${1#*\--} = "configure" ]] && local configuration='true';
      [[ ${1#*\--} = "create" ]] && local create_machine='true';
      [[ ${1#*\--} = "delete" ]] && local delete_machine='true';
      [[ ${1#*\--} = "deploy" ]] && local unattended_install='true';
      [[ ${1#*\--} = "install" ]] && local install_packages='true';
      if [[ ${1#*\--} = "iso-file" ]]; then
        local iso_filename="$(
            message "${2}" | sed -e "s|^\(~\)\(.*\)|${HOME}\2|"
          )";
        [[ ! -e ${iso_filename} ]] && unset iso_filename;
      fi;
      [[ ${1#*\--} = "packages" ]] && local custom_packages="${2}";
      [[ ${1#*\--} = "patch" ]] && local patch_files='true';
      [[ ${1#*\--} = "projects" ]] && local virtualbox_projects="${2}";
      [[ ${1#*\--} = "provision" ]] && local provisioning='true';
      if [[ ${1#*\--} = "ssh-key" ]]; then
        local sshkey_access="$(
            message "${2}" | sed -e "s|^\(~\)\(.*\)|${HOME}\2|"
          )";
      fi;
      [[ ${1#*\--} = "start" ]] && local start_machine='true';
      ## Assistance Parameters:
      [[ ${1#*\--} = "examples" ]] && local example_mode='true';
      [[ ${1#*\--} = "wizard" ]] && local wizard_mode='true';
      [[ ${1#*\--} = "info" ]] && local info_mode='true';
      [[ ${1#*\--} = "help" ]] && local assistance='true';
    done; IFS="${oIFS}";
    local oIFS="${IFS}"; IFS=$'\n';
    ## Prividing operational assistance (helper)
    if [[ ( ${assistance} == 'true' )   || \
          ( ${example_mode} == 'true' ) || \
          ( ${wizard_mode} == 'true' )  || \
          ( ${info_mode} == 'true' )
      ]]; then
      ## JSON source and object:
      local script_helper="${HOME}/.local/bin/script-helper.shell";
      if [[ -e ${script_helper} ]]; then
              source ${script_helper};
              script_helper --caller="${script_file}" \
                            --examples=${example_mode} \
                            --wizard=${wizard_mode} \
                            --info=${info_mode} \
              ;
              return 1;
        else  warning "Script Helper was not found";
              return 2;
      fi;
    fi;
    ## -------------------------------------------------------------------------
    ## Objective: System Operational Requirements
    if [[ ${#user_local} -eq 0 ]]; then
      export user_local="${HOME}/.local";
      mkdir -p "${user_local}";
    fi;
    ## Temporary folder/container:
    export local_temp="${user_local}/tmp";
    export vbox_temp="${local_temp}/vbox";
    export vbox_shared="${vbox_temp}/shared";
    ## Constructing a Vagrant Shared folder to exchange content
    comment "Enforcing VBox Shared folder [${vbox_shared}]";
    mkdir -p "${vbox_shared}";
    ## Target VirtualBox Home folder:
    if [[ ${#virtualbox_projects} -eq 0 ]]; then
      export virtualbox_projects="${HOME}/.virtualization/virtualbox";
      mkdir -p "${virtualbox_projects}";
      comment "Configuring Machine Folder [${virtualbox_projects}]";
      vboxmanage setproperty machinefolder ${virtualbox_projects};
    fi;
    ## -------------------------------------------------------------------------
    ## Processing Function Input Parameters
    if [[ ${#virtual_machine} -eq 0 ]]; then
      user_input="Virtual Machine name: ";
      newline; read -p "${user_input}" response;
      if [[ ${#response} -gt 0 ]]; then
              export virtual_machine="$(
                  message ${response} | tr '[[:upper:]]' '[[:lower:]]'
                )";
        else  ## Generating devops-(timestamp) name
              local virtual_machine="devops-${timestamp}";
              warning "Appliance's name [${virtual_machine}] timestamp-based";
      fi;
    fi;
    ## Virtual Machine hostname
    [[ ${#virtual_machine} -eq 0 ]] && \
       export virtual_machine="devops-console";
    ## e.g.: ubuntu-22.04.1-desktop-amd64.iso
    if [[ ${unattended_install} == 'true' ]]; then
      ## Processing ISO filename (location)
      local missing_isofile="No Installation ISO file was provided! ";
      if [[ ${#iso_filename} -eq 0 ]]; then
        warning "${missing_isofile}";
        ## Installation media (DVD ISO):
        user_input="Installation ISO location: ";
        newline; read -p "${user_input}" iso_filename;
        local fixing_filepath="$(
            message "${iso_filename}" \
            | sed -e "s|^\(~\)\(.*\)|${HOME}\2|"
          )";
        iso_filename="${fixing_filepath}";
        if [[ ${#iso_filename} -eq 0 ]]; then
          warning "Unable to continue";
          return 3;
        fi;
      fi;
      if [[ ! -e ${iso_filename} ]]; then
        warning "${missing_isofile}";
        return 4;
      fi;
    fi;
    if [[ ${#devops_account} -eq 0 ]]; then
      export devops_account='devops';
      local default_account="'${devops_account}' service account";
      warning "Using default ${default_account}";
    fi;
    if [[ ${#devops_password} -eq 0 ]]; then
      export devops_password="$(password)";
      local default_password="'${devops_password}' account password";
      warning "Using custom ${default_password}";
    fi;
    if [[ ${#configuration} -eq 0 ]]; then
            export configuration='false';
            ## warning "Configuration ${provisioning}";
      else  local missing_sshkey="SSH Access Key (file) was not found! ";
            if [[ ${#sshkey_access} -eq 0 ]]; then
              warning "${missing_sshkey}";
              ## Processing SSH Access Key file
              user_input="SSH Access Key (file): ";
              newline; read -p "${user_input}" response;
              local fixing_filepath="$(
                  message "${response}" \
                  | sed -e "s|^\(~\)\(.*\)|${HOME}\2|"
                )";
              sshkey_access="${fixing_filepath}";
            fi;
            if [[ ! -e ${sshkey_access} ]]; then
                    warning "${missing_sshkey}";
                    return 5;
              else  comment "Listing '${sshkey_access}' fingerprint";
                    newline;
                    ssh-keygen -l -E md5 -f "${sshkey_access}" ;
                    ssh-keygen -l -v -f "${sshkey_access}" ;
            fi;
    fi;
    if [[ ${#provisioning} -eq 0 ]]; then
      export provisioning='false';
      # warning "Provisioning ${provisioning} ! ";
    fi;
    local instance_location="";
    if [[ ${unattended_install} == 'true' ]]; then
            declare -a instance_ostype="$(
                VBoxManage list ostypes \
                | egrep "^(ID:)([[:blank:]]*)(Ubuntu22.*)(LTS).*(64)$" \
                | awk '{print $2}'
              )";
            comment "Virtual Machine OS Type [$instance_ostype]";
            comment "Creating virtual machine [${virtual_machine}]";
            declare -a response=($(
                VBoxManage createvm \
                         --name "${virtual_machine}" \
                         --ostype "${instance_ostype}" \
                         --register
              ));
            ## Virtual machine 'Ubuntu22_LTS_64' is created and registered.
            instance_registration="${response[0]}";
            ## UUID: f6fc21d3-7a3a-4490-a5fc-7d26aca20e09
            instance_uuid="${response[1]/UUID: /}";
            ## Settings file: '${virttualbox}/***/***.vbox'
            instance_settings="$(
                message ${response[2]} \
                | sed -e "s|^\(Settings file: '\)\(.*\)\(\'\)$|\2|"
              )";
            ## Extracting Virtual Machine Location and VBox-file:
            instance_location="$( dirname "${instance_settings}" )";
            instance_vboxfile="$( basename "${instance_settings}" )";
      else  instance_location="${virtualbox_projects}/${virtual_machine}";
    fi;
    comment "Virtual Machine location [${instance_location}]";
    comment "Virtual Machine vbox-file [${instance_vboxfile}]";
    local instance_vboxfile="${instance_location}/${virtual_machine}.vbox";
    if [[ ${provisioning} == 'true' ]]; then
      comment "Creating Virtual Machine Storage";
      vboxmanage_storage --vm-name="${virtual_machine}" \
                         --location="${instance_location}" \
                         --iso-file="${iso_filename}" \
      ; check_status;
      sleep 1;
      comment "Processing Aditional Configurations";
      vboxmanage_configvm --vm-name="${virtual_machine}" \
                          --memory='4096' \
                          --cpus='4' \
                          --vram='128' \
      ; check_status;
      sleep 1;
      comment "Processing Multimedia Configurations"
      vboxmanage_multimedia --vm-name="${virtual_machine}" \
                            --resolution='1920x1080' \
      ; check_status;
      sleep 1;
      ## Processing Virtual Machine Networking Configurations:
      counter=0;
      local bridged_configuration='';
      primary_interface;
      if [[ ( ${#INTF_NAME} -gt 0 ) && \
            ( ${#INTF_DESC} -gt 0 ) ]]; then
        comment "Listing active network configuration";
        newline;
        networksetup -getinfo "${INTF_DESC}";
        # DHCP Configuration
        # IP address: 192.168.0.182
        # Subnet mask: 255.255.255.0
        # Router: 192.168.0.1
        # Client ID:
        # IPv6: Automatic
        # IPv6 IP address: none
        # IPv6 Router: none
        # Ethernet Address: 58:ef:68:7d:93:31
        # Wi-Fi ID: 88:66:5a:04:b6:21
        comment "Listing internet routing configuration";
        newline;
        ip route get google.com; status=$?;
        ## Note:
        # if [[ ${status} -eq 0 ]]; then
          bridged_configuration="--bridged=$(( ++counter ))";
          bridged_configuration+=",${INTF_NAME}: ${INTF_DESC}";
        # fi;
        # message "Bridged Configuration:";
        # message "${bridged_configuration}";
      fi;
      comment "Listing DHCP Servers configurations";
      newline;
      vboxmanage list --long --sorted dhcpservers ;
      vboxmanage_networking --vm-name="${virtual_machine}" \
                            --nic-type='82545EM' \
                            ${bridged_configuration} \
                            --hostonly-network="$(( ++counter )),HostNetwork" \
                            --nat-network="$(( ++counter )),NatNetwork" \
                            --nat-only="$(( ++counter ))" \
      ; check_status;
      sleep 1;
      ## Warning: A deployment repository (Guest) needs to be provisioned
      ##          A manual step to be performed by the end-user at the Host level
      comment "Creating Shared Folder [${vbox_shared}] -> [/shared]";
      vboxmanage_sharedfolders --name="shared" \
                               --host-path="${vbox_shared}" \
                               --guest-path="/shared";
    fi;
    ## Unattended Installation
    if [[ ${unattended_install} == 'true' ]]; then
      ## Listing any existing Unattended* files
      # comment "Listing Unattended configuration files ...";
      # ls -al ${instance_location}/Unattended-* 2>/dev/null;
      ## Removing any existing Unattended* files
      warning "Removing Unattended configuration files";
      rm -fv ${instance_location}/Unattended-* 2>/dev/null;
      comment "Generating VirtualBox Un-Attended Installation";
      newline;
      VBoxManage unattended install ${virtual_machine} \
               --iso="${iso_filename}" \
               --user="${devops_account}" \
               ${password_option} \
               --full-user-name="DevOps Engineer" \
               --install-additions \
               --locale="en_US" \
               --country="US" \
               --time-zone="utc" \
               --hostname="${virtual_machine}.local" \
               --language="en" \
      ;
      check_status;
      ## Pre-Configuring patching files
      if [[ ${patch_files} == 'true' ]]; then
        declare -a targets=(
            preseed.cfg
            vboxpostinstall.sh
          );
        ## -----------------------------------------------------------------
        ## Configuring target-configs with custom settings.
        for target in ${targets[@]}; do
          ## Configuring each target with custom settings.
          export patch_template="patch-${target}";
          export remote_resource="${virtualbox_platform}/modules/${patch_template}";
          warning "Purging any existing ${vbox_temp}/${patch_template}";
          rm -fv ${vbox_temp}/${patch_template} 2>/dev/null;
          # check_status;
          comment "Fetching ${github_content}/${github_repo}/${remote_resource}";
          curl --silent \
               --output ${vbox_temp}/${patch_template} \
               https://${github_content}/${github_repo}/${remote_resource};
          check_status;
          while [[ ! -e ${vbox_temp}/${patch_template} ]]; do
            progress; sleep 1;
          done;
          check_status;
          if [[ ! -e ${vbox_temp}/${patch_template} ]]; then
            warning "${vbox_temp}/${patch_template} is missing";
            return 6;
          fi;
          local system_configuration="${instance_location}/Unattended-*-${target}";
          ## Creating symlink for shorter output:
          local active_location="$(pwd)";
          ## Correcting auto-generated presets
          if [[ ${patch_template} == 'patch-preseed.cfg' ]]; then
            user_string="username string";
            user_passwd="user-password.*password";
            root_passwd="root-password.*password";
            user_defaults="user-default-groups string";
            comment "Correcting settings the ${patch_template} template file";
            sed -i '' \
                -e "s|^\(.*/${user_string} \)\(.*\)$|\1{{ service-account }}|g" \
                -e "s|^\(.*/${user_passwd} \)\(.*\)$|\1{{ devops-password }}|g" \
                -e "s|^\(.*/${root_passwd} \)\(.*\)$|\1{{ root-password }}|g" \
                -e "s|^\(.*/${user_defaults} \)\(.*\)$|\1sudo|g" \
                ${system_configuration};
            check_status;
            comment "Injecting credentials in ${patch_template} template file";
            sed -i '' \
                -e "s|{{ service-account }}|${devops_account}|g" \
                -e "s|{{ devops-password }}|${devops_password}|g" \
                -e "s|{{ root-password }}|${root_password}|g" \
                ${system_configuration};
            check_status;
            comment "Listing modifications performed to [${patch_template}] file";
            newline;
            egrep --before-context=2 \
                  --after-context=2 \
            "^d-i passwd/.*$" ${system_configuration} \
            | sed -e "s|${devops_password}|***|" \
                  -e "s|${root_password}|***|";
          fi;
          if [[ ${patch_template} == 'patch-vboxpostinstall.sh' ]]; then
            local target_entry="usermod -a -G vboxsf ";
            comment "Correcting settings the ${patch_template} template file";
            sed -i '' \
                -e "s|^\(.*${target_entry}\)\(.*\)$|\1\"{{ service-account }}\"|" \
                ${system_configuration};
            ## Patching Deployment Configurations:
            ##  Warning: Reversed (or previously applied) patch detected!
            ##           Assume -R? [y] y
            ## Solution: --batch suppresses questions and some assumptions.
            comment "Patching ${system_configuration} file";
            newline;
            patch --batch \
                  ${system_configuration} < ${vbox_temp}/${patch_template};
            check_status;
            comment "Correcting settings ${system_configuration} file";
            sed -i '' \
                -e "s|{{ service-account }}|${devops_account}|g" \
                ${system_configuration};
            check_status;
            comment "Listing performed ${patch_template} modifications";
            newline;
            egrep --before-context=22 \
                  --after-context=4 \
            "^.*usermod -a -G vboxsf .*$" ${system_configuration};
          fi;
        done;
        cd ${instance_location};
        for target in ${targets[@]}; do
          ## Warning: The creation of this local symlink has to occur after
          ##          patching is performed. Otherwise it seems to break.
          comment "Linking Unattended patch-target file ...";
          newline;
          ln -fsv ./Unattended-*-${target} ./patch-${target};
        done;
        warning "Removing patched-file duplicates (e.g.: *.orig)";
        newline;
        rm -fv ./Unattended-*-${target}.orig 2>/dev/null;
        newline;
        cd "${active_location}" 2>/dev/null;
      fi;
      message "Completed! ";
      newline;
    fi;
    if [[ ${configuration} == 'true' ]]; then
      ## Identifying the VirtualBox virtual_machine's IP Address
      ## Warning: If Virtual Machine name is not valid this will fail.
      ##          VBoxManage: error: Could not find a registered machine named ...
      local status=0;
      comment "Obtaining Virtual Machine details";
      declare -a machine_details=($(
          VBoxManage showvminfo --details ${virtual_machine} \
          | grep bridged;
          echo -e ${?};
        ));
      # message "Bridged Network:\n${machine_details[@]}";
      if [[ ${machine_details[-1]} -gt 0 ]]; then
        warning "Virtual Machine is invalid";
        return 7;
      fi;
      if [[ ${machine_details[-1]} -eq 0 ]]; then
        local regex='^';
        regex+='\(NIC.*\)\(MAC\:\ \)';
        regex+='\([a-zA-Z0-9]*\)';
        regex+="\(\,.*Bridged.*\'\)";
        regex+='\(.*\)';
        regex+="\(\'\,.*\)";
        regex+='$';
        comment "Extracting Bridged Network configurations";
        newline;
        declare -a bridged_network=($(
            message "${machine_details[@]}" \
            | sed -e "s|${regex}|\3\n\5|"
          ));
        local bridged_macaddr="$(
            message "${bridged_network[0]}" \
            | fold -w2 \
            | tr '\n' ':' | tr '[[:upper:]]' '[[:lower:]]' \
            | sed -e 's|\:$||'
          )";  ## -e 's|00|0|g' -e 's|\(0\)\([0-9]\)|\2|g'
        message "Bridged MAC Address: ${bridged_macaddr}";
        local bridged_interface="${bridged_network[1]%\:*}";
        message "Bridged Interface:   ${bridged_interface}";
        network_access --vm-name="${virtual_machine}" \
                       --ssh-key="${sshkey_access}" \
                       --mac-addr="${bridged_macaddr}" \
        ; check_status;
        # message "IP Address: ${ipaddr}";
        ## -------------------------------------------------------------
        ## Note: I have hashed my ~/.ssh/known_hosts file.
        #        $ ssh-keygen -H ;
        # /Users/emvaldes/.ssh/known_hosts updated.
        # Original contents retained as /Users/emvaldes/.ssh/known_hosts.old
        # WARNING: /Users/emvaldes/.ssh/known_hosts.old contains unhashed entries
        # Delete this file to ensure privacy of hostnames
        ## -------------------------------------------------------------
        ## -H -F hostname : Search for the hashed specified hostname in
        ## a known_hosts file, listing any occurrences found.
        comment "Identifying ${ipaddr} in ${HOME}/.ssh/known_hosts file";
        declare -a check_hostexist=($(
            ssh-keygen -H -F ${ipaddr}
          ));
        if [[ ${#check_hostexist[@]} -gt 0 ]]; then
          ## -H -R hostname : Removes all hashed hosts (keys) belonging to
          ## hostname from a known_hosts file.
          warning "Purging any ${ipaddr} existing records";
          newline;
          ssh-keygen -R ${ipaddr};
        fi;
        comment "Copying the SSH Access Key to Guest System";
        ## Configuring each target with custom settings.
        export expect_template="ssh-copy-id.expect";
        export remote_resource="${virtualbox_platform}/modules/${expect_template}";
        rm -fv ${vbox_temp}/${expect_template} 2>/dev/null;
        # check_status;
        comment "Fetching ${github_content}/${github_repo}/${remote_resource}";
        curl --silent \
             --output ${vbox_temp}/${expect_template} \
             https://${github_content}/${github_repo}/${remote_resource};
        check_status;
        while [[ ! -e ${vbox_temp}/${expect_template} ]]; do
          progress; sleep 1;
        done;
        check_status;
        if [[ ! -e ${vbox_temp}/${expect_template} ]]; then
          warning "${vbox_temp}/${expect_template} is missing";
          return 8;
        fi;
        comment "Executing ${expect_template} expect-template";
        newline;
        $(which expect) -c "$(
            cat ${vbox_temp}/${expect_template} \
            | sed -e "s|{{ sshkey_access }}|${sshkey_access}|g" \
                  -e "s|{{ devops_account }}|${devops_account}|g" \
                  -e "s|{{ network_address }}|${ipaddr}|g" \
                  -e "s|{{ devops_password }}|${devops_password}|g"
          )";
        check_status;
        ## Enabling Passwordless Access
        sudoers_privileges;
        check_status;
        ## Enabling Auto-Login Access
        sudoers_autologin;
        check_status;
      fi;
    fi;
    if [[ ${install_packages} == 'true' ]]; then
      ## Installing DevOps Packages.
      preinst_packages;
      check_status;
      postinst_packages;
      check_status;
    fi;
    if [[ ${start_machine} == 'true' ]]; then
      ## Starting VirtualBox Virtual Machine.
      VBoxManage startvm ${virtual_machine};
      check_status;
    fi;
    if [[ ${delete_machine} == 'true' ]]; then
      ## Starting VirtualBox Virtual Machine.
      VBoxManage controlvm ${virtual_machine} acpipowerbutton;
      check_status;
      VBoxManage unregistervm --delete ${virtual_machine};
      check_status;
      return 9;
    fi;
    IFS="${oIFS}";
    return 0;
  }; alias virtualbox-appliance='virtualbox_appliance';

virtualbox_appliance ${@}

## -------------------------------------------------------------------------
## Objective: Script & Environment Variables
## SSH Access authorized keys:
## export authorized_keys="/home/${devops_account}/.ssh/authorized_keys";

## -----------------------------------------------------------------------------
## Reference: https://www.virtualbox.org/manual/UserManual.html
              #unattended-guest-install-example
## -----------------------------------------------------------------------------
