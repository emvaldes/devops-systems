#!/usr/bin/env bash

## -----------------------------------------------------------------------------
## Reference: https://www.virtualbox.org/manual/UserManual.html
              #unattended-guest-install-example
## -----------------------------------------------------------------------------

function vboxmanage_storage () {
    local oIFS="${IFS}";
    for xitem in "${@}"; do
      IFS='='; set `echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'`
      [[ ${1#*\--} = "vm-name" ]] && local vm_name="${2}";
      [[ ${1#*\--} = "vm-location" ]] && local vm_location="${2}";
      [[ ${1#*\--} = "volume-size" ]] && local volume_size="${2}";
      [[ ${1#*\--} = "iso-file" ]] && local iso_filename="${2}";
    done; IFS="${oIFS}";
    local oIFS="${IFS}"; IFS=$'\n';
    [[ ${#vm_location} -eq 0 ]] && {
        echo -e "\nWarning: No Virtual Machine Location was provided! \n";
        exit 1;
      };
    [[ ${#volume_size} -eq 0 ]] && volume_size='25000';
    ## Create a virtual hard disk and storage devices for the Virtual Machine.
    VBoxManage createhd \
             --filename "${vm_location}/${vm_name}.vdi" \
             --size 25000 ;
    ## Create a SATA storage controller and attach the virtual hard disk.
    VBoxManage storagectl ${vm_name} \
             --name "SATA Controller" \
             --add sata \
             --controller IntelAHCI ;
    VBoxManage storageattach ${vm_name} \
             --storagectl "SATA Controller" \
             --port 0 \
             --device 0 \
             --type hdd \
             --medium "${vm_location}/${vm_name}.vdi" ;
    ## Create an IDE Storage Controller for a virtual DVD drive
    ## and attach a Linux installation ISO.
    VBoxManage storagectl ${vm_name} \
             --name "IDE Controller" \
             --add ide ;
    VBoxManage storageattach ${vm_name} \
             --storagectl "IDE Controller" \
             --port 1 \
             --device 0 \
             --type dvddrive \
             --medium ${iso_filename} ;
    IFS="${oIFS}";
    return 0;
  }; alias vboxmanage-storage='vboxmanage_storage';

function vboxmanage_configvm () {
    local oIFS="${IFS}";
    for xitem in "${@}"; do
      IFS='='; set `echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'`
      [[ ${1#*\--} = "vm-name" ]] && local vm_name="${2}";
      [[ ${1#*\--} = "memory" ]] && local memory_size="${2}";
      [[ ${1#*\--} = "cpus" ]] && local total_cpus="${2}";
      [[ ${1#*\--} = "vram" ]] && local vram_size="${2}";
    done; IFS="${oIFS}";
    local oIFS="${IFS}"; IFS=$'\n';
    ## General -> Advanced:
    VBoxManage modifyvm ${vm_name} \
             --clipboard-mode=bidirectional \
             --drag-and-drop=bidirectional ;
    ## System -> Motherboard:
    VBoxManage modifyvm ${vm_name} \
             --memory ${memory_size} ;

    VBoxManage modifyvm ${vm_name} \
             --boot1 dvd \
             --boot2 disk \
             --boot3 none \
             --boot4 none ;
    VBoxManage modifyvm ${vm_name} \
             --chipset=piix3 \
             --mouse=usbmtscreenpluspad \
             --ioapic=on \
             --rtc-use-utc=on ;
    ## System -> Processor:
    VBoxManage modifyvm ${vm_name} \
             --cpus=${total_cpus} \
             --cpu-execution-cap=100 \
             --pae=off ;
    ## System -> Acceleration:
    VBoxManage modifyvm ${vm_name} \
             --paravirt-provider=default \
             --nested-paging=on ;
    ## Display -> Screen:
    VBoxManage modifyvm ${vm_name} \
             --vram ${vram_size} \
             --monitor-count=1 \
             --graphicscontroller=vmsvga \
             --accelerate-3d=off ;
    # ## Ports -> Serial Ports:
    # VBoxManage modifyvm ${vm_name} \
    #          --uart1=0x3f8 5 \
    #          --uart-mode1="/tmp/vbox--${vm_name}" \
    #          --uart-type1=16550a ;
    ## Ports -> USB 2.0 (OHCI + EHCI) Controller
    VBoxManage modifyvm ${vm_name} \
             --usb-ehci=on ;
    IFS="${oIFS}";
    return 0;
  }; alias vboxmanage-configvm='vboxmanage_configvm';

function vboxmanage_multimedia () {
    local oIFS="${IFS}";
    for xitem in "${@}"; do
      IFS='='; set `echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'`
      [[ ${1#*\--} = "vm-name" ]] && local vm_name="${2}";
      [[ ${1#*\--} = "file-name" ]] && local recording="${2}";
      [[ ${1#*\--} = "frame-rate" ]] && local frame_rate="${2}";
      [[ ${1#*\--} = "resolution" ]] && local resolution="${2}";
      [[ ${1#*\--} = "video-quality" ]] && local video_quality="${2}";
    done; IFS="${oIFS}";
    local oIFS="${IFS}"; IFS=$'\n';
    [[ ${#recording} -eq 0 ]] && {
        recording="${virtualbox}/recordings/${vm_name}-screen0.webm";
      }
    [[ ${#frame_rate} -eq 0 ]] && frame_rate='30';
    [[ ${#video_quality} -eq 0 ]] && video_quality='2048';
    [[ ${#audio_controller} -eq 0 ]] && audio_controller='ac97';
    # ## Display
    VBoxManage modifyvm ${vm_name} \
             --recording=on \
             --recording-file=${recording} \
             --recording-video-fps=${frame_rate} \
             --recording-video-res=${resolution} \
             --recording-video-rate=${video_quality} ;
    ## Audio:
    VBoxManage modifyvm ${vm_name} \
             --audio=default \
             --audio-controller=${audio_controller} \
             --audio-in=on \
             --audio-out=on ;
    IFS="${oIFS}";
    return 0;
  }; alias vboxmanage-multimedia='vboxmanage_multimedia';

function vboxmanage_networking () {
    local oIFS="${IFS}";
    for xitem in "${@}"; do
      IFS='='; set `echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'`
      [[ ${1#*\--} = "vm-name" ]] && local vm_name="${2}";
      [[ ${1#*\--} = "nic-type" ]] && local nic_type="${2}";
      [[ ${1#*\--} = "bridged" ]] && local bridged_network="${2}";
      [[ ${1#*\--} = "hostonly-network" ]] && local hostonly_network="${2}";
      [[ ${1#*\--} = "nat-network" ]] && local nat_network="${2}";
      [[ ${1#*\--} = "nat-only" ]] && local nat_only="${2}";
    done; IFS="${oIFS}";
    local oIFS="${IFS}"; IFS=$'\n';
    [[ "${#bridged_network}" -gt 0 ]] && {
        trace_filename="/tmp/trace--bridged-network--${vm_name}";
        index="${bridged_network%%\,*}";
        interface="${bridged_network##*\,}";
        VBoxManage modifyvm ${vm_name} \
                 --nic${index}=bridged \
                 --nic-type${index}=${nic_type} \
                 --bridge-adapter${index}="${interface}" \
                 --cable-connected${index}=on \
                 --nic-trace${index}=on \
                 --nic-trace-file${index}=${trace_filename};
      };
    [[ "${#hostonly_network}" -gt 0 ]] && {
        trace_filename="/tmp/trace--hostonly-network--${vm_name}";
        index="${hostonly_network%%\,*}";
        interface="${hostonly_network##*\,}";
        VBoxManage modifyvm ${vm_name} \
                 --nic${index}=hostonlynet \
                 --nic-type${index}=${nic_type} \
                 --host-only-net${index}="${interface}" \
                 --cable-connected${index}=on \
                 --nic-trace${index}=on \
                 --nic-trace-file${index}=${trace_filename};
      };
    [[ "${#nat_network}" -gt 0 ]] && {
        trace_filename="/tmp/trace--nat-network--${vm_name}";
        index="${nat_network%%\,*}";
        interface="${nat_network##*\,}";
        VBoxManage modifyvm ${vm_name} \
                 --nic${index}=natnetwork \
                 --nic-type${index}=${nic_type} \
                 --host-only-net${index}="${interface}" \
                 --cable-connected${index}=on \
                 --nic-trace${index}=on \
                 --nic-trace-file${index}=${trace_filename};
      };
    [[ ${#nat_only} -gt 0 ]] && {
        trace_filename="/tmp/trace--nat-only--${vm_name}";
        index="${nat_only%%\,*}";
        VBoxManage modifyvm ${vm_name} \
                 --nic${index}=nat \
                 --nic-type${index}=${nic_type} \
                 --cable-connected${index}=on \
                 --nic-trace${index}=on \
                 --nic-trace-file${index}=${trace_filename};
      };
    IFS="${oIFS}";
    return 0;
  }; alias vboxmanage-networking='vboxmanage_networking';

function virtualbox_appliance () {
    local oIFS="${IFS}";
    for xitem in "${@}"; do
      IFS='='; set `echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'`
      [[ ${1#*\--} = "vm-name" ]] && local vm_name="${2}";
      [[ ${1#*\--} = "create" ]] && local create_machine='true';
      [[ ${1#*\--} = "account" ]] && local service_account="${2}";
      [[ ${1#*\--} = "password" ]] && local account_password="${2}";
      [[ ${1#*\--} = "iso-file" ]] && local iso_filename="${2}";
      [[ ${1#*\--} = "auto-install" ]] && local unattended_install='true';
      [[ ${1#*\--} = "patch" ]] && local patch_files='true';
      [[ ${1#*\--} = "start" ]] && local start_machine='true';
      [[ ${1#*\--} = "delete" ]] && local delete_machine='true';
      [[ ${1#*\--} = "virtualbox" ]] && local virtualbox="${2}";
    done; IFS="${oIFS}";
    ## Script configuration
    local script_path=$( dirname ${0} );
    ## echo -e "Script Path: ${script_path}";
    local script_name=$( basename ${0%\.*} );
    ## echo -e "Script Name: ${script_name}";
    local script_type=$( basename ${0##*\.} );
    ## echo -e "Script Type: ${script_type}";
    local oIFS="${IFS}"; IFS=$'\n';
    [[ ${#vm_name} -eq 0 ]] && {
        echo -e "\nWarning: No Virtual Machine Name was provided! \n";
        return 1;
      };
    [[ ${#service_account} -eq 0 ]] && {
        export service_account='devops';
        echo -en "\nWarning: Using default ";
        echo -e  "'${service_account}' service account! \n";
      } ;
    [[ ${#account_password} -eq 0 ]] && {
        export account_password="${service_account}";
        echo -en "\nWarning: Using default ";
        echo -e  "'${account_password}' account password! \n";
      } ;
    [[ ${#virtualbox} -eq 0 ]] && {
        export virtualbox="${HOME}/.virtualization/virtualbox";
        echo -en "\nWarning: Using default ";
        echo -e  "'${service_account}' service account! \n";
        ## Cleaning existing location:
        rm -rfv ${virtualbox}/${vm_name} 2>/dev/null ;
      } ;
    [[ ${#iso_filename} -eq 0 ]] && {
        echo -e "\nWarning: No Installation ISO file was provided! \n";
        ## Installation media (DVD ISO):
        # export iso_filename='ubuntu-22.04.1-desktop-amd64.iso';
        unattended_install='false';
      };
    ## Collecting Virtual Machinen OS Type:
    declare -a vm_ostype="$(
        VBoxManage list ostypes \
        | egrep "^(ID:)([[:blank:]]*)(Ubuntu22.*)(LTS).*(64)$" \
        | awk '{print $2}'
      )";
    local vm_location="";
    if [[ ${unattended_install} == 'true' ]]; then
            ## Create the virtual machine.
            declare -a response=($(
                VBoxManage createvm \
                         --name "${vm_name}" \
                         --ostype "${vm_ostype}" \
                         --register
              ));
            ## Virtual machine 'Ubuntu22_LTS_64' is created and registered.
            vm_registration="${response[0]}";
            ## UUID: f6fc21d3-7a3a-4490-a5fc-7d26aca20e09
            vm_uuid="${response[1]/UUID: /}";
            ## Settings file: '${virttualbox}/Ubuntu22_LTS_64/Ubuntu22_LTS_64.vbox'
            vm_settings="$(
                echo -e ${response[2]} \
                | sed -e "s|^\(Settings file: '\)\(.*\)\(\'\)$|\2|"
              )";
            ## Extracting Virtual Machine Location and VBox-file:
            vm_location="$( dirname "${vm_settings}" )";
            vm_vboxfile="$( basename "${vm_settings}" )";
      else  vm_location="${virtualbox}/${vm_name}";
    fi;
    local vm_vboxfile="${vm_location}/${vm_name}.vbox";
    ## Processing Virtual Machine Storage:
    vboxmanage_storage --vm-name="${vm_name}" \
                       --vm-location="${vm_location}" \
                       --iso-file="${HOME}/Downloads/${iso_filename}" \
    ; sleep 1;
    ## Processing Virtual Machine Aditional Configurations
    vboxmanage_configvm --vm-name="${vm_name}" \
                        --memory='4096' \
                        --cpus='4' \
                        --vram='128' \
    ; sleep 1;
    ## Processing Virtual Machine Multimedia Configurations
    vboxmanage_multimedia --vm-name="${vm_name}" \
                          --resolution='1920x1080' \
    ; sleep 1;
    ## Processing Virtual Machine Networking Configurations:
    vboxmanage_networking --vm-name="${vm_name}" \
                          --nic-type='82545EM' \
                          --bridged='1,en0: Ethernet' \
                          --hostonly-network='2,HostNetwork' \
                          --nat-network='3,NatNetwork' \
                          --nat-only='4' \
    ; sleep 1;
    [[ ${unattended_install} == 'true' ]] && {
        ## Generating VirtualBox Un-Attended Installation configurations:
        VBoxManage unattended install ${vm_name} \
                 --iso=/Users/emvaldes/Downloads/${iso_filename} \
                 --user=${service_account} \
                 --password=${service_account} \
                 --full-user-name='DevOps Engineer' \
                 --install-additions \
                 --locale=en_US \
                 --country=US \
                 --time-zone=utc \
                 --hostname=${vm_name}.local \
                 --language=en \
        ;
        [[ ${patch_files} == 'true' ]] && {
            ## Patching Pre-Seed Configurations:
            patch ${vm_location}/Unattended-*-preseed.cfg \
                  < ${script_path}/patch-preseed.cfg ;
            ## Patching VBOX Post-Install Script:
            patch ${vm_location}/Unattended-*-vboxpostinstall.sh \
                  < ${script_path}/patch-vboxpostinstall.sh ;
          };
      };
    [[ ${start_machine} == 'true' ]] && {
        ## Starting VirtualBox Virtual Machine.
        VBoxManage startvm ${vm_name} ;
      };
    [[ ${delete_machine} == 'true' ]] && {
        ## Starting VirtualBox Virtual Machine.
        VBoxManage controlvm ${vm_name} acpipowerbutton ;
        VBoxManage unregistervm --delete ${vm_name} ;
        return 10;
      };
    IFS="${oIFS}";
    return 0;
  }; alias virtualbox-appliance='virtualbox_appliance';

# virtualbox_appliance --vm-name=devops-console \
#                      --account=devops \
#                      --password=devops \
#                      --iso-file='ubuntu-22.04.1-desktop-amd64.iso' \
#                      --virtualbox="${HOME}/.virtualization/virtualbox" \
#                      --auto-install \
#                      --patch \
# ;
