#!/usr/bin/env bash

## -----------------------------------------------------------------------------
## Objective: Constructing Virtual Machine
function vboxmanage_configvm () {
    local oIFS="${IFS}";
    for xitem in "${@}"; do
      IFS='='; set `echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'`
      [[ ${1#*\--} = "instance" ]] && local virtual_machine="${2}";
      [[ ${1#*\--} = "cpus" ]] && local total_cpus="${2}";
      [[ ${1#*\--} = "memory" ]] && local memory_size="${2}";
      [[ ${1#*\--} = "vram" ]] && local vram_size="${2}";
    done; IFS="${oIFS}";
    local oIFS="${IFS}"; IFS=$'\n';
    ## General -> Advanced:
    VBoxManage modifyvm ${virtual_machine} \
             --clipboard-mode=bidirectional \
             --drag-and-drop=bidirectional \
    ; check_status;
    ## System -> Motherboard:
    VBoxManage modifyvm ${virtual_machine} \
             --memory ${memory_size} \
    ; check_status;
    ## Device Order (default: dvd+disk+...)
    VBoxManage modifyvm ${virtual_machine} \
             --boot1 dvd \
             --boot2 disk \
             --boot3 none \
             --boot4 none \
    ; check_status;
    VBoxManage modifyvm ${virtual_machine} \
             --chipset=piix3 \
             --mouse=usbmtscreenpluspad \
             --ioapic=on \
             --rtc-use-utc=on \
    ; check_status;
    ## System -> Processor:
    VBoxManage modifyvm ${virtual_machine} \
             --cpus=${total_cpus} \
             --cpu-execution-cap=100 \
             --pae=off \
    ; check_status;
    ## System -> Acceleration:
    VBoxManage modifyvm ${virtual_machine} \
             --paravirt-provider=default \
             --nested-paging=on \
    ; check_status;
    ## Display -> Screen:
    VBoxManage modifyvm ${virtual_machine} \
             --vram ${vram_size} \
             --monitor-count=1 \
             --graphicscontroller=vmsvga \
             --accelerate-3d=off \
    ; check_status;
    # ## Ports -> Serial Ports:
    # VBoxManage modifyvm ${virtual_machine} \
    #          --uart1=0x3f8 5 \
    #          --uart-mode1="/tmp/vbox--${virtual_machine}" \
    #          --uart-type1=16550a \
    # ; check_status;
    ## Ports -> USB 2.0 (OHCI + EHCI) Controller
    VBoxManage modifyvm ${virtual_machine} \
             --usb-ehci=on \
    ; check_status;
    IFS="${oIFS}";
    return 0;
  }; alias vboxmanage-configvm='vboxmanage_configvm';

## -----------------------------------------------------------------------------
## Objective: Configuring Multimedia Services
function vboxmanage_multimedia () {
    local oIFS="${IFS}";
    for xitem in "${@}"; do
      IFS='='; set `echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'`
      [[ ${1#*\--} = "instance" ]] && local virtual_machine="${2}";
      [[ ${1#*\--} = "file-name" ]] && local recording="${2}";
      [[ ${1#*\--} = "frame-rate" ]] && local frame_rate="${2}";
      [[ ${1#*\--} = "resolution" ]] && local resolution="${2}";
      [[ ${1#*\--} = "video-quality" ]] && local video_quality="${2}";
    done; IFS="${oIFS}";
    local oIFS="${IFS}"; IFS=$'\n';
    [[ ${#recording} -eq 0 ]] && {
        recording="${virtualbox_projects}/recordings/${virtual_machine}-screen0.webm";
      }
    [[ ${#frame_rate} -eq 0 ]] && frame_rate='30';
    [[ ${#video_quality} -eq 0 ]] && video_quality='2048';
    [[ ${#audio_controller} -eq 0 ]] && audio_controller='ac97';
    # ## Display
    VBoxManage modifyvm ${virtual_machine} \
             --recording=on \
             --recording-file=${recording} \
             --recording-video-fps=${frame_rate} \
             --recording-video-res=${resolution} \
             --recording-video-rate=${video_quality} \
    ; check_status;
    ## Audio:
    VBoxManage modifyvm ${virtual_machine} \
             --audio=default \
             --audio-controller=${audio_controller} \
             --audio-in=on \
             --audio-out=on \
    ; check_status;
    IFS="${oIFS}";
    return 0;
  }; alias vboxmanage-multimedia='vboxmanage_multimedia';

## -----------------------------------------------------------------------------
## Objective: Configuring Network Interfaces
function vboxmanage_networking () {
    local oIFS="${IFS}";
    for xitem in "${@}"; do
      IFS='='; set `echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'`
      [[ ${1#*\--} = "instance" ]] && local virtual_machine="${2}";
      [[ ${1#*\--} = "bridged" ]] && local bridged_network="${2}";
      [[ ${1#*\--} = "hostonly-network" ]] && local hostonly_network="${2}";
      [[ ${1#*\--} = "nat-network" ]] && local nat_network="${2}";
      [[ ${1#*\--} = "nat-only" ]] && local nat_only="${2}";
      [[ ${1#*\--} = "nic-type" ]] && local nic_type="${2}";
    done; IFS="${oIFS}";
    local oIFS="${IFS}"; IFS=$'\n';
    local network_tracing="/tmp/virtualbox/${virtual_machine}";
    mkdir -p "${network_tracing}";
    [[ "${#bridged_network}" -gt 0 ]] && {
        local trace_prefixed="${network_tracing}/trace--bridged-network";
        local trace_filename="${trace_prefixed}--${virtual_machine}";
        local index="${bridged_network%%\,*}";
        local interface="${bridged_network##*\,}";
        VBoxManage modifyvm ${virtual_machine} \
                 --nic${index}=bridged \
                 --nic-type${index}=${nic_type} \
                 --bridge-adapter${index}="${interface}" \
                 --cable-connected${index}=on \
                 --nic-trace${index}=on \
                 --nic-trace-file${index}=${trace_filename} \
        ; check_status;
      };
    [[ "${#hostonly_network}" -gt 0 ]] && {
        local trace_prefixed="${network_tracing}/trace--hostonly-network";
        local trace_filename="${trace_prefixed}--${virtual_machine}";
        local index="${hostonly_network%%\,*}";
        local interface="${hostonly_network##*\,}";
        VBoxManage modifyvm ${virtual_machine} \
                 --nic${index}=hostonlynet \
                 --nic-type${index}=${nic_type} \
                 --host-only-net${index}="${interface}" \
                 --cable-connected${index}=on \
                 --nic-trace${index}=on \
                 --nic-trace-file${index}=${trace_filename} \
        ; check_status;
      };
    [[ "${#nat_network}" -gt 0 ]] && {
        local trace_prefixed="${network_tracing}/trace--nat-network";
        local trace_filename="${trace_prefixed}--${virtual_machine}";
        local index="${nat_network%%\,*}";
        local interface="${nat_network##*\,}";
        VBoxManage modifyvm ${virtual_machine} \
                 --nic${index}=natnetwork \
                 --nic-type${index}=${nic_type} \
                 --host-only-net${index}="${interface}" \
                 --cable-connected${index}=on \
                 --nic-trace${index}=on \
                 --nic-trace-file${index}=${trace_filename} \
        ;
        check_status;
      };
    [[ ${#nat_only} -gt 0 ]] && {
        local trace_prefixed="${network_tracing}/trace--nat-only";
        local trace_filename="${trace_prefixed}--${virtual_machine}";
        local index="${nat_only%%\,*}";
        VBoxManage modifyvm ${virtual_machine} \
                 --nic${index}=nat \
                 --nic-type${index}=${nic_type} \
                 --cable-connected${index}=on \
                 --nic-trace${index}=on \
                 --nic-trace-file${index}=${trace_filename} \
        ; check_status;
      };
    IFS="${oIFS}";
    return 0;
  }; alias vboxmanage-networking='vboxmanage_networking';

## -----------------------------------------------------------------------------
## Objective: Configuring Shared Folders
function vboxmanage_sharedfolders () {
    local oIFS="${IFS}";
    for xitem in "${@}"; do
      IFS='='; set `echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'`
      [[ ${1#*\--} = "instance" ]] && local virtual_machine="${2}";
      [[ ${1#*\--} = "name" ]] && local share_name="${2}";
      [[ ${1#*\--} = "host-path" ]] && local host_path="${2}";
      [[ ${1#*\--} = "guest-path" ]] && local guest_path="${2}";
    done; IFS="${oIFS}";
    local oIFS="${IFS}"; IFS=$'\n';
    if [[ -e ${host_path} ]]; then
            ## Create Shared Folder: (Host: /tmp/shared) + (Guest: /shared)
            VBoxManage sharedfolder add ${virtual_machine} \
                                  --name="${share_name}" \
                                  --hostpath="${host_path}" \
                                  --automount \
                                  --auto-mount-point=${guest_path} \
            ; check_status;
            sleep 1;
      else  newline;
            echo -e "Warning: Host-Path does not exist! ";
            newline;
            return 6;
    fi;
    return 0;
  }; alias vboxmanage-sharedfolders='vboxmanage_sharedfolders';

## -----------------------------------------------------------------------------
## Objective: Configuring Storage Capabilities
function vboxmanage_storage () {
    local oIFS="${IFS}";
    for xitem in "${@}"; do
      IFS='='; set `echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'`
      [[ ${1#*\--} = "instance" ]] && local virtual_machine="${2}";
      [[ ${1#*\--} = "iso-file" ]] && local iso_filename="${2}";
      [[ ${1#*\--} = "location" ]] && local instance_location="${2}";
      [[ ${1#*\--} = "volume-size" ]] && local volume_size="${2}";
    done; IFS="${oIFS}";
    local oIFS="${IFS}"; IFS=$'\n';
    [[ ${#instance_location} -eq 0 ]] && {
        newline;
        echo -e "Warning: No Virtual Machine Location was provided! ";
        newline;
        exit 1;
      };
    [[ ${#volume_size} -eq 0 ]] && volume_size='25000';
    ## Create a virtual hard disk and storage devices for the Virtual Machine.
    newline;
    echo -e "Creating Medium (Hard Drive: *.vdi)";
    newline;
    VBoxManage createhd \
             --filename "${instance_location}/${virtual_machine}.vdi" \
             --size ${volume_size} \
    ; check_status;
    newline;
    ## Create a SATA storage controller and attach the virtual hard disk.
    VBoxManage storagectl ${virtual_machine} \
             --name "SATA Controller" \
             --add sata \
             --controller IntelAHCI \
    ; check_status;
    VBoxManage storageattach ${virtual_machine} \
             --storagectl "SATA Controller" \
             --port 0 \
             --device 0 \
             --type hdd \
             --medium "${instance_location}/${virtual_machine}.vdi" \
    ; check_status;
    ## Create an IDE Storage Controller for a virtual DVD drive
    ## and attach a Linux installation ISO.
    VBoxManage storagectl ${virtual_machine} \
             --name "IDE Controller" \
             --add ide \
    ; check_status;
    VBoxManage storageattach ${virtual_machine} \
             --storagectl "IDE Controller" \
             --port 1 \
             --device 0 \
             --type dvddrive \
             --medium ${iso_filename} \
    ; check_status;
    IFS="${oIFS}";
    return 0;
  }; alias vboxmanage-storage='vboxmanage_storage';
