#!/usr/bin/env bash

## -----------------------------------------------------------------------------
## Objective: Printing empty lines (output)
function newline () { echo -e; return 0; };

## -----------------------------------------------------------------------------
## Objective: Printing (output) without terminating newline
function inline ()  { echo -en "${@}"; return 0; };

## -----------------------------------------------------------------------------
## Objective: Printing custom messages (formatting is provided)
function display () {
    message="${1}";
    [[ ${#message} -gt 0 ]] && {
      newline; echo -e "${message}"; ## newline;
    }; return 0;
  };

## -----------------------------------------------------------------------------
## Objective: Printing inline to simulate progress (output)
function progress () { inline '.'; return 0; };

## -----------------------------------------------------------------------------
## Objective: Printing warning messages (output)
function warning ()  { display "Warning: ${@}! "; return 0; };

## -----------------------------------------------------------------------------
## Objective: Printing comment messages (output)
function comment ()  { display "Comment: ${@}"; return 0; };

## -----------------------------------------------------------------------------
## Objective: Printing custom messages (output)
function message ()  { echo -e "${@}"; return 0; }; alias print='message';

## -----------------------------------------------------------------------------
## Objective: Configuring Auto-Login Capabilities
function sudoers_autologin () {
    local autologin_script="sudoers-autologin.shell";
    local remote_module="${ubuntu_modules}/${autologin_script}";
    warning "Removing any existing '${vbox_temp}/${autologin_script}' file";
    rm -fv ${vbox_temp}/${autologin_script} 2>/dev/null;
    # check_status;
    comment "Fetching ${github_content}/${github_repo}/${remote_module}";
    curl --silent \
         --output ${vbox_temp}/${autologin_script} \
         https://${github_content}/${github_repo}/${remote_module};
    check_status;
    while [[ ! -e ${vbox_temp}/${autologin_script} ]]; do
      progress; sleep 1;
    done;
    check_status;
    if [[ -e ${vbox_temp}/${autologin_script} ]]; then
            ## Updating the serice-account placeholder
            sed -i '' -e "s|{{ service-account }}|${devops_account}|" \
                      ${vbox_temp}/${autologin_script};
            check_status;
            ## Updating the virtual-machine placeholder
            sed -i '' -e "s|{{ virtual-machine }}|${virtual_machine}|" \
                      ${vbox_temp}/${autologin_script};
            check_status;
            comment "Listing '${autologin_script}' configurations";
            newline;
            cat  ${vbox_temp}/${autologin_script};
            comment "Executing the '${autologin_script}' script";
            ssh ${virtual_machine} -C 'bash -s' \
              < ${vbox_temp}/${autologin_script} 2>/dev/null;
            check_status;
      else  warning "${vbox_temp}/${autologin_script} is missing";
            return 5;
    fi;
    return 0;
  }; alias sudoers-autologin='sudoers_autologin';

## -----------------------------------------------------------------------------
## Objective: Configuring Sudoers Privileges
function sudoers_privileges () {
    ## Enabling Passwordless Access
    local privileges_script="sudoers-privileges.shell";
    local remote_module="${ubuntu_modules}/${privileges_script}";
    warning "Removing any existing '${vbox_temp}/${privileges_script}' file";
    rm -fv ${vbox_temp}/${privileges_script} 2>/dev/null;
    # check_status;
    comment "Fetching ${github_content}/${github_repo}/${remote_module}";
    curl --silent \
         --output ${vbox_temp}/${privileges_script} \
         https://${github_content}/${github_repo}/${remote_module};
    check_status;
    while [[ ! -e ${vbox_temp}/${privileges_script} ]]; do
      progress; sleep 1;
    done;
    check_status;
    if [[ -e ${vbox_temp}/${privileges_script} ]]; then
            insert_lines="${vbox_temp}/insert-lines.file";
            ## Creating a temporary file and adding these hacking-lines
            message "## Provisioning auto-configuration for passwordless sudo." \
                  > ${insert_lines};
            check_status;
            inline 'echo -e "'${devops_password}'\\n" ' \
                  >> ${insert_lines};
            check_status;
            message '| sudo -S systemctl status ssh 2>&1>/dev/null' \
                  >> ${insert_lines};
            check_status;
            ## Inserting into the sudoers-privileges.shell file
            ## the insert-lines.fileâ€™s content
            sed -i '' "/## {{ placeholder }}$/ r ${vbox_temp}/insert-lines.file" \
                      ${vbox_temp}/${privileges_script};
            check_status;
            ## Removing placeholder entry to avoid recurrencies
            sed -i '' '/## {{ placeholder }}/d' ${vbox_temp}/${privileges_script};
            check_status;
            ## Updating the serice-account placeholder
            sed -i '' -e "s|{{ service-account }}|${devops_account}|" \
                      ${vbox_temp}/${privileges_script};
            check_status;
            comment "Listing '${privileges_script}' configurations";
            newline;
            cat  ${vbox_temp}/${privileges_script};
            comment "Executing the '${privileges_script}' script";
            newline;
            ssh ${virtual_machine} -C 'bash -s' \
              < ${vbox_temp}/${privileges_script} 2>/dev/null;
            check_status;
      else  warning "${vbox_temp}/${privileges_script} is missing";
            return 4;
    fi;
    return 0;
  }; alias sudoers-privileges='sudoers_privileges';
