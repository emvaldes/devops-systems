#!/usr/bin/env bash

## -----------------------------------------------------------------------------
## Objective: Environment Functions

## -----------------------------------------------------------------------------
## Objective: Printing empty lines (output)
function newline () { echo -e; return 0; };

## -----------------------------------------------------------------------------
## Objective: Printing (output) without terminating newline
function inline ()  { echo -en "${@}"; return 0; };

## -----------------------------------------------------------------------------
## Objective: Printing custom messages (formatting is provided)
function display () {
    message="${1}";
    [[ ${#message} -gt 0 ]] && {
      newline; echo -e "${message}"; ## newline;
    }; return 0;
  };

## -----------------------------------------------------------------------------
## Objective: Printing inline to simulate progress (output)
function progress () { inline '.'; return 0; };

## -----------------------------------------------------------------------------
## Objective: Printing warning messages (output)
function warning ()  { display "Warning: ${@}! "; return 0; };

## -----------------------------------------------------------------------------
## Objective: Printing comment messages (output)
function comment ()  { display "Comment: ${@}"; return 0; };

## -----------------------------------------------------------------------------
## Objective: Printing custom messages (output)
function message ()  { echo -e "${@}"; return 0; }; alias print='message';

## -----------------------------------------------------------------------------
## Objective: Random Password Generator (32 length)
function password () {
    inline $( date +%s | sha256sum | base64 | head -c 32 );
    return 0;
  };

## -----------------------------------------------------------------------------
## Objective: Identify Element's Array Index
function array_index () {
    local oIFS="${IFS}"; IFS=$'\n';
    declare -a array=($( message "${1}" | tr ' ' '\n' ));
    local value="${2}";
    # message "Array: ${array[@]}";
    for index in "${!array[@]}"; do
      [[ "${array[$index]}" == "${value}" ]] && {
          message "${index}"; break;
        } || { continue; };
    done;
    IFS="${oIFS}";
    return 0;
  }; alias array-index='array_index';

## -----------------------------------------------------------------------------
## Objective: Parsing operational status for each event
function check_status () {
    status=${1};
    exit_message="Aborting execution on $(date +"%y%m%d%H%M%S")";
    if [[ ${status} -ne 0 ]]; then
            user_input="$((counter++)) = Error was found. Continue [N/y]: ";
            newline; read -t 15 -p "${user_input}" response;
            if [[ ${#response} -gt 0 ]]; then
                    selection="$(
                        message ${response} | tr '[[:upper:]]' '[[:lower:]]'
                      )";
                    if [[ 'n' =~ "${selection:0:1}" ]]; then
                            warning "${exit_message}";
                            exit ${status};
                      else  return 0;
                    fi;
              else  warning "${exit_message}";
                    exit ${status};
            fi;
      else  return 0;
    fi;
    return 0;
  }; alias check-status='check_status';

## -----------------------------------------------------------------------------
## Objective: Pre-Installing Core Packages
function preinst_packages () {
    local script_filename="ubuntu-preinstall.shell";
    local remote_resource="${ubuntu_modules}/${script_filename}";
    warning "Removing any existing '${vbox_temp}/${script_filename}' file";
    rm -fv ${vbox_temp}/${script_filename} 2>/dev/null;
    # check_status $?;
    comment "Fetching ${github_content}/${github_repo}/${remote_resource}";
    curl --silent \
         --output ${vbox_temp}/${script_filename} \
         https://${github_content}/${github_repo}/${remote_resource};
    check_status $?;
    while [[ ! -e ${vbox_temp}/${script_filename} ]]; do
      progress; sleep 1;
    done; newline;
    check_status $?;
    ssh ${virtual_machine} -C 'bash -s' \
      < ${vbox_temp}/${script_filename} 2>/dev/null;
    check_status $?;
    return 0;
  }; alias preinst-packages='preinst_packages';

## -----------------------------------------------------------------------------
## Objective: Post-Installing Core Packages
function postinst_packages () {
    local script_filename="ubuntu-postinstall.shell";
    local remote_resource="${ubuntu_modules}/${script_filename}";
    warning "Removing any existing '${vbox_temp}/${script_filename}' file";
    rm -fv ${vbox_temp}/${script_filename} 2>/dev/null;
    # check_status $?;
    comment "Fetching ${github_content}/${github_repo}/${remote_resource}";
    curl --silent \
         --output ${vbox_temp}/${script_filename} \
         https://${github_content}/${github_repo}/${remote_resource};
    check_status $?;
    while [[ ! -e ${vbox_temp}/${script_filename} ]]; do
      progress; sleep 1;
    done; newline;
    check_status $?;
    ssh ${virtual_machine} -C 'bash -s' \
      < ${vbox_temp}/${script_filename} 2>/dev/null;
    check_status $?;
    return 0;
  }; alias postinst-packages='postinst_packages';

## -----------------------------------------------------------------------------
## Objective: Identify Network Active Interface
function primary_interface () {
    oIFS="${IFS}"; IFS=$'\n';
    [[ "${OSTYPE}" =~ "darwin" ]] && export os_release='darwin';
    if [[ "${os_release}" == "darwin" ]]; then
      local interface="$(
          route get google.com | grep interface | awk '{print $2}'
        )";
      declare -a active_interface=($(
          networksetup -listallhardwareports \
          | egrep -B1 -A1 ${interface} \
          | awk -F': ' '{print $2}'
        ));
      export INTF_DESC="${active_interface[0]}";
      export INTF_NAME="${active_interface[1]}";
      export INTF_MAC="${active_interface[2]}";
    fi;
    if [[ ${#INTF_NAME} -gt 0 ]]; then
      export INTF_ADDR="$(
          /sbin/ifconfig ${INTF_NAME} 2>/dev/null \
          | grep 'inet ' | awk '{print $2}'
        )";
    fi;
    # message "Interface Description: ${INTF_DESC}";
    # message "Interface Name: ${INTF_NAME}";
    # message "Interface MAC: ${INTF_MAC}";
    # message "Interface Address: ${INTF_ADDR}";
    IFS="${oIFS}";
    return 0;
  }; alias primary-interface='primary_interface';

## -----------------------------------------------------------------------------
## Objective: Identify if it's a number and within a specific range-set
function valid_number () {
    ## https://stackoverflow.com/questions/806906/how-do-i-test-if-a-variable-is-a-number-in-bash
    local range_min range_max;
    [[ ${#1} -gt 0 ]] && selection=${1} || return 1;
    [[ ${#2} -gt 0 ]] && range_min=${2} || range_min=1;
    [[ ${#3} -gt 0 ]] && range_max=${3} || range_max=100;
    abort_script='false';
    invalid_number="\nWarning: Selection is not a valid number! \n";
    valid_number="\nNotice: Selection is a valid number";
    local regex='^[0-9]+$';
    if ! [[ ${selection} =~ ${regex} ]]; then
           abort_script='true';
      elif (( selection < ${range_min} || selection > ${range_max} )); then
           abort_script='true';
    fi;
    [[ ${abort_script} == 'true' ]] && {
        # message "${invalid_number}" >&2;
        return 2;
      };
    return 0;
  }; alias valid-digit='is_digit';

## -----------------------------------------------------------------------------
## Objective: Configuring Access Capabilities
function network_access () {
    local oIFS="${IFS}";
    for xitem in "${@}"; do
      IFS='='; set `echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'`
      [[ ${1#*\--} = "instance" ]] && local virtual_machine="${2}";
      [[ ${1#*\--} = "interface" ]] && local interface="${2}";
      [[ ${1#*\--} = "hostname" ]] && local hostname="${2}";
      [[ ${1#*\--} = "ssh-key" ]] && local sshkey_access="${2}";
      [[ ${1#*\--} = "mac-addr" ]] && local bridged_macaddr="${2}";
    done; IFS="${oIFS}";
    local oIFS="${IFS}"; IFS=$'\n';
    ## Define custom-parameter(s):
    [[ ${#virtual_machine} -eq 0 ]] && {
        warning "Missing VirtualBox Appliance Name";
        return 3;
      };
    [[ ${#interface} -eq 0 ]] && local interface="Bridged";
    [[ ${#hostname} -eq 0 ]] && local hostname="${virtual_machine}";
    # ## Identifying the VirtualBox virtual_machine's IP Address
    # declare -a showvminfo=($(
    #     VBoxManage showvminfo --details ${virtual_machine} \
    #     | grep bridged \
    #     | sed -e "s|^\(NIC.*\)\(MAC\:\ \)\([a-zA-Z0-9]*\)\(\,.*Bridged.*'\)\(.*\)\('\,.*\)$|\3\n\5|"
    #   ));
    # local bridged_macaddr="$(
    #     message "${showvminfo[0]}" \
    #        | fold -w2 \
    #        | tr '\n' ':' | tr '[[:upper:]]' '[[:lower:]]' \
    #        | sed -e 's|\:$||'
    #   )";  ## -e 's|00|0|g' -e 's|\(0\)\([0-9]\)|\2|g'
    # local bridged_interface="${showvminfo[1]%\:*}";
    local localnet="${HOME}/.localnet";
    comment "Executing ARP Scanning -> ${localnet} : ";
    newline;
    ## Required to avoid any manual scanning
    sudo arp-scan --localnet | tee ${localnet};
    declare -a listed=($(
        egrep "${bridged_macaddr}" ${localnet} \
        | sed -e "s|${bridged_macaddr}|${virtual_machine}|" \
        | tr '\t' '*' | awk -F'*' '{print $1"\n"$2"\n"$3}'
      ));
    # for each in ${listed[@]}; do message "${each}"; done;
    export ipaddr="${listed[0]}";
    export device="${listed[2]}";
    ## System Configuration files
    local etc_hosts="/etc/hosts";
    local ssh_config="${HOME}/.ssh/config";
    local known_hosts="${HOME}/.ssh/known_hosts";
    ## Processing valid IP Address
    if [[ ${#ipaddr} -gt 0 ]]; then
      ## Right-Padding IP Address
      local xipaddr="$( printf "% -20s" ${ipaddr})";
      local xdevice="$( printf "% -20s" ${virtual_machine})";
      ## Reviewing the /etc/hosts for duplicates
      declare -a ipaddr_exists=($(
          egrep "^${ipaddr}.*$" ${etc_hosts}
        ));
      if [[ ${#ipaddr_exists[@]} -gt 1 ]]; then
        warning "Warning: Multiple records exists";
        for record in ${ipaddr_exists[@]}; do
          message "Record: ${record}";
        done;
        ## Purging existing virtual-machine record
        ## sed -i '' "/^${ipaddr}.*${virtual_machine}.*$/d" ${etc_hosts};
        local status=1;
        newline; read -t 15 -p "Continue [Y/n] : " response;
        if [[ ${#response} -gt 0 ]]; then
          selection="$(
              message ${response} | tr '[[:upper:]]' '[[:lower:]]'
            )";
          if [[ 'n' =~ "${selection:0:1}" ]]; then
            newline;
            exit ${status};
          fi;
        fi;
      fi;
      local custom_message="record in ${etc_hosts} file! ";
      local update_record="$(
          egrep -c "^.*${virtual_machine}.*$" ${etc_hosts}
        )";
      if [[ ${update_record} -gt 0 ]]; then
              local exact_match=$(
                  egrep -c "^${ipaddr}.*${virtual_machine}.*$" ${etc_hosts}
                );
              if [[ ${exact_match} -eq 0 ]]; then
                local regex='^';
                regex+='\([0-9\.]\)\{1,\}\([[:blank:]]*\)';
                regex+="\(${virtual_machine}.*\)";
                regex+='$';
                warning "Updating ${custom_message}";
                sudo sed -i '' "s|${regex}|${xipaddr}\3|" "${etc_hosts}";
              fi;
        else  comment "Appending ${custom_message}";
              message "${xipaddr}${xdevice}$(
                  message "${virtual_machine#*\-}.${virtual_machine%%\-*}.local"
                )" | sudo tee -a "${etc_hosts}";
      fi;
      ## Listing /etc/hosts current configuration
      newline;
      cat "${etc_hosts}";
      local custom_message=" Record in ${ssh_config} file! ";
      if [[ $( egrep -c "Host ${virtual_machine}" ${ssh_config} ) -eq 0 ]]; then
              comment "Updating ${custom_message}";
              declare -a config_block=();
              config_block+=("\nHost ${virtual_machine}");
              config_block+=("  AddKeysToAgent yes");
              config_block+=("  HostName ${ipaddress}");
              config_block+=("  User devops");
              config_block+=("  StrictHostKeyChecking no");
              config_block+=("  IdentityFile ${sshkey_access}");
              for each in ${config_block[@]}; do
                message "${each}" >> ${ssh_config};
              done;
        else  ## Updating configuration block
              comment "Updating ${custom_message}";
              local header="Host ${virtual_machine}";
              local footer="IdentityFile .*";
              sed -i '' \
                  "/${header}/,/${footer}/s/\(^.*HostName \)\(.*\)$/\1${ipaddr}/" \
                  ${ssh_config};
      fi;
      ## Listing SSH Configuration block
      egrep --fixed-strings \
            --before-context=1 \
            --after-context=6 \
            "Host ${virtual_machine}" ${ssh_config};
    fi;
    ## Removing/Purging host's legacy entries
    # sed -i '' /^$(
    #     grep "^.*${virtual_machine}.*$" ${etc_hosts} | cut -d' ' -f1
    #   ).*/d ${known_hosts} ;
    IFS="${oIFS}";
    return 0;
  }; alias network-access='network_access';
