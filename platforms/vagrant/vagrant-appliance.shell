#!/usr/bin/env bash

# Functions: vagrant_appliance
#            check_status
#            config_section
#            destroy_appliance
#            newline
#            patch_vagrantfile
#            postinst_packages
#            preinst_packages
#            service_access
#            service_account
#            sudoers_autologin
#            sudoers_privileges
#            transfer_credentials
#            vagrant_access
#            vagrant_addbox
#            vagrant_config
#            vagrant_deploy
#            vagrant_initbox
#            vagrant_review
#
# vagrant-appliance.shell --help ;
#
# Required    --account           Service Account (username: devops)
#             --boxset            Provide Vagrant cloud boxes
#             --instance          Virtual Machine instance name
#             --ssh-key           Profile SSH Access (Public Key)
#
# Optional    --cache             Deployment resources location
#             --location          Virtual Machine Location
#             --packages          Install Custom DevOps Packages
#             --projects          Target Vagrant projects
#             --shared            System Shared Content
#             --example           Display script's execution options
#             --wizard            Parse user-input to execute command
#             --info              Project credits and online references
#             --help              Show this help message and exits
#
# Usage:
#
# vagrant-appliance.shell --account="devops" \
#                         --boxset="bento/ubuntu-22.04" \
#                         --instance="ubuntu-230118191348" \
#                         --ssh-key="${HOME}/.ssh/id_rsa.pub" \
# ;
#
# vagrant-appliance.shell --account="devops" \
#                         --boxset="bento/ubuntu-22.04" \
#                         --ssh-key="${HOME}/.ssh/id_rsa.pub" \
#                         --cache="~/.local" \
#                         --location="~/.vagrant.d/sources/ubuntu-22.04" \
#                         --projects="~/.vagrant.d" \
#                         --shared="~/.local/tmp/shared" \
# ;

## Execution timestamp:
export timestamp="$( date +"%y%m%d%H%M%S" )";

export script_file="$(pwd)/${0#*\/}";
export script_name="$( basename ${script_file} )";

export user_local="${HOME}/.local";
mkdir -p "${user_local}";

## -----------------------------------------------------------------------------
## Objective: Environment Functions

function newline () { echo -e; return 0; };

## Random Password:
function password () {
    echo -en $( date +%s | sha256sum | base64 | head -c 32 );
    return 0;
  };

## -----------------------------------------------------------------------------
## Objective: System Pre-Requirements

## Description: Constructing GitHub URI (raw user content)
export github_content='raw.githubusercontent.com';
export github_repo='emvaldes/devops-systems';

export vagrant_platform='master/platforms/vagrant';
export ubuntu_modules='master/ubuntu/modules';

## -----------------------------------------------------------------------------
## Objective: Script & Environment Variables

## Events status counter:
export counter=0;

## -----------------------------------------------------------------------------
## Objective: Parsing operational status for each event
function check_status () {
    status=${1};
    if [[ ${status} -ne 0 ]]; then
            user_input="$((counter++)) = Error was found. Continue [N/y]: ";
            newline; read -t 15 -p "${user_input}" response;
            if [[ ${#response} -gt 0 ]]; then
                    selection="$(
                        echo -e ${response} | tr '[[:upper:]]' '[[:lower:]]'
                      )";
                    if [[ 'n' =~ "${selection:0:1}" ]]; then
                            exit ${status};
                      else  return 0;
                    fi;
              else  exit ${status};
            fi;
      else  return 0;
    fi;
    # return 0;
  }; alias check-status='check_status';

## -----------------------------------------------------------------------------
## Objective: Reviewing existing Vagrant Infrastructure
function vagrant_review () {
    local index=0;
    tree -a ${vagrant_projects};
    check_status $?;
    vagrant box list;
    check_status $?;
    local existing="$(
        vagrant box list | grep -F "${vagrant_boxset}"
      )";
    if [[ ${#existing} -gt 0 ]]; then
      user_input="$((index++)) = ${vagrant_boxset} was found. Destroy [N/y]: ";
      newline; read -t 15 -p "${user_input}" response;
      if [[ ${#response} -gt 0 ]]; then
              newline; read -t 30 -p "${user_input}" response;
              if [[ ${#response} -gt 0 ]]; then
                      selection="$(
                          echo -e ${response} | tr '[[:upper:]]' '[[:lower:]]'
                        )";
                      if [[ 'n' =~ "${selection:0:1}" ]]; then
                              return 0;
                        else  cd ${vagrant_location};
                              vagrant destroy --graceful;
                              vagrant box remove "${vagrant_boxset}" \
                                      --provider virtualbox \
                                      --force \
                                      --all;
                      fi;
                else  exit ${status};
              fi;
        else  return 0;
      fi;
    fi;
    return 0;
  }; alias vagrant-review='vagrant_review';

## -----------------------------------------------------------------------------
## Objective: Adding Vagrant Box (bento/ubuntu-22.04)
function vagrant_addbox () {
    vagrant box add ${vagrant_boxset} \
          --force \
          --provider virtualbox;
    check_status $?;
    tree -a ${vagrant_projects}/boxes;
    check_status $?;
    vagrant box list;
    check_status $?;
    return 0;
  }; alias vagrant-addbox='vagrant_addbox';

## -----------------------------------------------------------------------------
## Objective: Initializing Vagrant Box (review)
function vagrant_initbox () {
    cd ${vagrant_location};
    mkdir -p ${vagrant_location} && cd $_;
    if [[ -e ./Vagrantfile ]]; then
      newline;
      echo -e "Warning: Vagrantfile already exists! ";
      newline;
      rm -fv ./Vagrantfile 2>/dev/null;
    fi;
    check_status $?;
    vagrant init ${vagrant_boxset};
    check_status $?;
    tree -a ${vagrant_projects};
    check_status $?;
    return 0;
  }; alias vagrant-initbox='vagrant_initbox';

## -----------------------------------------------------------------------------
## Objective: Patching Vagrant Box (Vagrantfile)
## Create Patch-file:
## diff -u ./Vagrantfile ./custom.configs > ./patch-vagrantfile;
function patch_vagrantfile () {
    cd ${vagrant_location};
    local patch_vagrantfile="patch-vagrantfile";
    local remote_resource="${vagrant_platform}/${patch_vagrantfile}";
    rm -fv ${vagrant_temp}/${patch_vagrantfile} 2>/dev/null;
    # check_status $?;
    curl --silent \
         --output ${vagrant_temp}/${patch_vagrantfile} \
         https://${github_content}/${github_repo}/${remote_resource};
    check_status $?;
    while [[ ! -e ${vagrant_temp}/${patch_vagrantfile} ]]; do
      echo -e '.'; sleep 1;
    done; echo -e;
    check_status $?;
    # cat ${vagrant_temp}/${patch_vagrantfile};
    # --- ./Vagrantfile         2023-01-08 15:16:11
    # +++ ./custom.vagrantfile  2023-01-08 15:30:15
    # @@ -67,4 +67,11 @@
    #    #   apt-get update
    #    #   apt-get install -y apache2
    #    # SHELL
    # +
    # +  config.vm.synced_folder "{{ vagrant-shared }}", "/shared"
    # +  config.vm.hostname = "{{ virtual-machine }}"
    # +  config.vm.provider "virtualbox" do |console|
    # +    console.name = "{{ virtual-machine }}"
    # +  end
    # +
    #  end
    ## Updating the vagrant-shared placeholder
    sed -i '' -e "s|{{ vagrant-shared }}|${vagrant_shared}|" \
                 ${vagrant_temp}/${patch_vagrantfile};
    check_status $?;
    ## Updating the virtual-machine placeholder
    sed -i '' -e "s|{{ virtual-machine }}|${virtual_machine}|" \
                 ${vagrant_temp}/${patch_vagrantfile};
    check_status $?;
    cat -n ${vagrant_temp}/${patch_vagrantfile};
    patch ${vagrant_location}/Vagrantfile < ${vagrant_temp}/${patch_vagrantfile};
    check_status $?;
    vagrant validate;
    check_status $?;
    return 0;
  }; alias patch-vagrantfile='patch_vagrantfile';

## -----------------------------------------------------------------------------
## Objective: Deploying Vagrant Box Appliance
function vagrant_deploy () {
    cd ${vagrant_location};
    vagrant up;
    check_status $?;
    tree ${vagrant_projects}/boxes/;
    check_status $?;
    return 0;
  }; alias vagrant-deploy='vagrant_deploy';

## -----------------------------------------------------------------------------
## Objective: Reviewing Vagrant Box Configuration
function vagrant_config () {
    cd ${vagrant_location};
    vagrant status;
    check_status $?;
    vagrant ssh-config;
    check_status $?;
    return 0;
  }; alias vagrant-config='vagrant_config';

## -----------------------------------------------------------------------------
## Objective: Validating Vagrant Box Credentials
function vagrant_access () {
    local machine_configs=".vagrant/machines/default/virtualbox";
    cat ${vagrant_location}/${machine_configs}/private_key;
    vagrant ssh -c \
            "fold -b -w 70 /home/vagrant/.ssh/authorized_keys" 2>/dev/null;
    check_status $?;
    return 0;
  }; alias vagrant-access='vagrant_access';

## -----------------------------------------------------------------------------
## Objective: Creating Service Account Script
function service_account () {
    cd ${vagrant_location};
    local script_filename="service-account.shell";
    local remote_resource="${vagrant_platform}/${script_filename}";
    rm -fv ${vagrant_temp}/${script_filename} 2>/dev/null;
    # check_status $?;
    curl --silent \
         --output ${vagrant_temp}/${script_filename} \
         https://${github_content}/${github_repo}/${remote_resource};
    check_status $?;
    while [[ ! -e ${vagrant_temp}/${script_filename} ]]; do
      echo -e '.'; sleep 1;
    done; echo -e;
    check_status $?;
    ## Updating the service-account placeholder
    sed -i '' -e "s|{{ service-account }}|${devops_account}|" \
                 ${vagrant_temp}/${script_filename};
    check_status $?;
    vagrant ssh -c 'bash -' < ${vagrant_temp}/${script_filename};
    check_status $?;
    return 0;
  }; alias service-account='service_account';

## -----------------------------------------------------------------------------
## Objective: Configuring Sudoers Privileges
function sudoers_privileges () {
    cd ${vagrant_location};
    local privileges_script="sudoers-privileges.shell";
    local remote_resource="${ubuntu_modules}/${privileges_script}";
    rm -fv ${vagrant_temp}/${privileges_script} 2>/dev/null;
    # check_status $?;
    curl --silent \
         --output ${vagrant_temp}/${privileges_script} \
         https://${github_content}/${github_repo}/${remote_resource};
    check_status $?;
    while [[ ! -e ${vagrant_temp}/${privileges_script} ]]; do
      echo -e '.'; sleep 1;
    done; echo -e;
    check_status $?;
    ## Updating the service-account placeholder
    sed -i '' -e "s|{{ service-account }}|${devops_account}|" \
                 ${vagrant_temp}/${privileges_script};
    check_status $?;
    vagrant ssh -c 'bash -' < ${vagrant_temp}/${privileges_script};
    check_status $?;
    return 0;
  }; alias sudoers-privileges='sudoers_privileges';

## -----------------------------------------------------------------------------
## Objective: Transferring Access Credentials
function transfer_credentials () {
    cd ${vagrant_location};
    fold -b -w 70 ${devops_sshkey};
    cp -v ${devops_sshkey} ${vagrant_shared};
    check_status $?;
    local sshkey_filename="$( basename ${devops_sshkey} )";
    vagrant ssh -c \
            "cat /shared/${sshkey_filename} | sudo tee ${authorized_keys}";
    check_status $?;
    vagrant ssh -c \
            "sudo cat ${authorized_keys} | fold -b -w 70";
    check_status $?;
    rm -v ${vagrant_shared}/${sshkey_filename};
    check_status $?;
    return 0;
  }; alias transfer-credentials='transfer_credentials';

## -----------------------------------------------------------------------------
## Objective: Configuring Auto-Login Capabilities
function sudoers_autologin () {
    cd ${vagrant_location};
    local autologin_script="sudoers-autologin.shell";
    local remote_resource="${ubuntu_modules}/${autologin_script}";
    rm -fv ${vagrant_temp}/${autologin_script} 2>/dev/null;
    # check_status $?;
    curl --silent \
         --output ${vagrant_temp}/${autologin_script} \
         https://${github_content}/${github_repo}/${remote_resource};
    check_status $?;
    while [[ ! -e ${vagrant_temp}/${autologin_script} ]]; do
      echo -e '.'; sleep 1;
    done; echo -e;
    check_status $?;
    ## Updating the service-account placeholder
    sed -i '' -e "s|{{ service-account }}|${devops_account}|" \
                 ${vagrant_temp}/${autologin_script};
    check_status $?;
    ## Updating the virtual-machine placeholder
    sed -i '' -e "s|{{ virtual-machine }}|${virtual_machine}|" \
                 ${vagrant_temp}/${autologin_script};
    check_status $?;
    vagrant ssh -c 'bash -' < ${vagrant_temp}/${autologin_script};
    check_status $?;
    return 0;
  }; alias sudoers-autologin='sudoers_autologin';

## -----------------------------------------------------------------------------
## Objective: Transferring SSH Access Credentials
function service_access () {
    cd ${vagrant_location};
    cat ${devops_sshkey};
    check_status $?;
    cp -v ${devops_sshkey} ${vagrant_shared};
    check_status $?;
    local sshkey_filename="$( basename ${devops_sshkey} )";
    vagrant ssh -c \
            "cat /shared/${sshkey_filename} | sudo tee ${authorized_keys}";
    check_status $?;
    vagrant ssh -c \
            "sudo cat ${authorized_keys} | fold -b -w 70";
    check_status $?;
    rm -v ${vagrant_shared}/${sshkey_filename};
    check_status $?;
    return 0;
  }; alias service-access='service_access';

## -----------------------------------------------------------------------------
## Objective: Adding SSH Configuration Section
function config_section () {
    cd ${vagrant_location};
    local private_sshkey="${devops_sshkey/.pub/}";
    ## Purging configuration block if it already exists
    local section_header="/Host ${virtual_machine}";
    sed -i '' "${section_header}/,/LogLevel FATAL/d" ${HOME}/.ssh/config;
    sed -i '' '/^$/N;/^\n$/D' ~/.ssh/config;
    check_status $?;
    vagrant ssh-config \
          | sed -e "s|Host default|Host ${virtual_machine}|g" \
                -e "s|\(User \)\(.*\)|\1${devops_account}|g" \
                -e "s|\( IdentityFile \)\(.*\)|\1${private_sshkey}|g" \
    >> ${HOME}/.ssh/config;
    check_status $?;
    egrep -A12 "^Host ${virtual_machine}" ${HOME}/.ssh/config;
    check_status $?;
    return 0;
  }; alias config-section='config_section';

## -----------------------------------------------------------------------------
## Objective: Pre-Installing Core Packages
function preinst_packages () {
    cd ${vagrant_location};
    local script_filename="ubuntu-preinstall.shell";
    local remote_resource="${ubuntu_modules}/${script_filename}";
    rm -fv ${vagrant_temp}/${script_filename} 2>/dev/null;
    # check_status $?;
    curl --silent \
         --output ${vagrant_temp}/${script_filename} \
         https://${github_content}/${github_repo}/${remote_resource};
    check_status $?;
    while [[ ! -e ${vagrant_temp}/${script_filename} ]]; do
      echo -e '.'; sleep 1;
    done; echo -e;
    check_status $?;
    vagrant ssh -c 'bash -' < ${vagrant_temp}/${script_filename};
    check_status $?;
    return 0;
  }; alias preinst-packages='preinst_packages';

## -----------------------------------------------------------------------------
## Objective: Post-Installing Core Packages
function postinst_packages () {
    cd ${vagrant_location};
    local script_filename="ubuntu-postinstall.shell";
    local remote_resource="${ubuntu_modules}/${script_filename}";
    rm -fv ${vagrant_temp}/${script_filename} 2>/dev/null;
    # check_status $?;
    curl --silent \
         --output ${vagrant_temp}/${script_filename} \
         https://${github_content}/${github_repo}/${remote_resource};
    check_status $?;
    while [[ ! -e ${vagrant_temp}/${script_filename} ]]; do
      echo -e '.'; sleep 1;
    done; echo -e;
    check_status $?;
    vagrant ssh -c 'bash -' < ${vagrant_temp}/${script_filename};
    check_status $?;
    return 0;
  }; alias postinst-packages='postinst_packages';

## -----------------------------------------------------------------------------
## Objective: Destroying Vagrant Box (ubuntu)
function destroy_appliance () {
    cd ${vagrant_location};
    vagrant destroy;
    check_status $?;
    return 0;
  }; alias destroy-appliance='destroy_appliance';

## -----------------------------------------------------------------------------
## Objective: Deploy Vagrant Appliance
function vagrant_appliance () {
    local oIFS="${IFS}";
    for xitem in "${@}"; do
      IFS='='; set `echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'`
      ## Required Parameters:
      [[ ${1#*\--} = "account" ]] && local devops_account="${2}";
      [[ ${1#*\--} = "boxset" ]] && local vagrant_boxset="${2}";
      [[ ${1#*\--} = "instance" ]] && local virtual_machine="${2}";
      [[ ${1#*\--} = "ssh-key" ]] && local devops_sshkey="${2}";
      ## Optional Parameters:
      [[ ${1#*\--} = "cache" ]] && local user_local="${2}";
      [[ ${1#*\--} = "location" ]] && local vagrant_location="${2}";
      [[ ${1#*\--} = "packages" ]] && local custom_packages="${2}";
      [[ ${1#*\--} = "projects" ]] && local vagrant_projects="${2}";
      [[ ${1#*\--} = "shared" ]] && local vagrant_shared="${2}";
      ## Assistance Parameters:
      [[ ${1#*\--} = "example" ]] && local example_mode='true';
      [[ ${1#*\--} = "wizard" ]] && local wizard_mode='true';
      [[ ${1#*\--} = "info" ]] && local info_mode='true';
      [[ ${1#*\--} = "help" ]] && local assistance='true';
    done; IFS="${oIFS}";
    local oIFS="${IFS}"; IFS=$'\n';
    ## Prividing operational assistance (helper)
    if [[ ( ${assistance} == 'true' )   || \
          ( ${example_mode} == 'true' ) || \
          ( ${wizard_mode} == 'true' )  || \
          ( ${info_mode} == 'true' )
      ]]; then
      ## JSON source and object:
      local script_helper="${HOME}/.local/bin/script-helper.shell";
      if [[ -e ${script_helper} ]]; then
              source ${script_helper};
              script_helper --caller="${script_file}" \
                            --example=${example_mode} \
                            --wizard=${wizard_mode} \
                            --info=${info_mode} \
              ;
              return 6;
        else  newline;
              echo -e "Warning: Script Helper was not found! ";
              newline;
              return 7;
      fi;
    fi;
    ## -------------------------------------------------------------------------
    ## Objective: Default Appplication Parameters
    ## Reference: https://app.vagrantup.com/boxes/search
    [[ ${#vagrant_boxset} -eq 0 ]] && {
        ## e.g.: bento/ubuntu-22.04
        user_input="Source Vagrant Cloud: ";
        newline; read -t 15 -p "${user_input}" response;
        if [[ ${#response} -gt 0 ]]; then
                export vagrant_boxset="$(
                    echo -e ${response} | tr '[[:upper:]]' '[[:lower:]]'
                  )";
          else  newline;
                echo -e "Warning: Unable to continue! ";
                newline;
                return 1;
        fi;
      };
    export vagrant_cloudset="${vagrant_boxset%%\/*}";
    export vagrant_instance="${vagrant_boxset##*\/}";
    ## Virtual Machine hostname
    [[ ${#virtual_machine} -eq 0 ]] && \
       export virtual_machine="${vagrant_instance%\-*}-${timestamp}";
    ## Default Service Account:
    [[ ${#devops_account} -eq 0 ]] && export devops_account='devops';
    ## DevNetOps framework credentials:
    [[ ${#devops_sshkey} -eq 0 ]] && export devops_sshkey="${HOME}/.ssh/id_rsa.pub";
    ## -------------------------------------------------------------------------
    ## Objective: System Operational Requirements
    [[ ${#user_local} -eq 0 ]] && {
        export user_local="${HOME}/.local";
        mkdir -p "${user_local}";
      };
    ## Temporary folder/container:
    export local_temp="${user_local}/tmp";
    export vagrant_temp="${local_temp}/vagrant";
    export vagrant_shared="${vagrant_temp}/shared";
    ## Constructing a Vagrant Shared folder to exchange content
    mkdir -p "${vagrant_shared}";
    ## -------------------------------------------------------------------------
    ## Objective: Script & Environment Variables
    ## SSH Access authorized keys:
    export authorized_keys="/home/${devops_account}/.ssh/authorized_keys";
    ## Target Vagrant Home folder:
    [[ ${#vagrant_projects} -eq 0 ]] && {
        export vagrant_projects="${HOME}/.vagrant.d";
      };
    export vagrant_sources="${vagrant_projects}/sources";
    ## Target Vagrant Instance Location:
    export vagrant_location="${vagrant_sources}/${vagrant_instance}/${virtual_machine}";
    mkdir -p "${vagrant_location}";
    ## -------------------------------------------------------------------------
    ## Objective: Initialization modules
    vagrant_review;             ## Reviewing existing Vagrant Infrastructure
    vagrant_addbox;             ## Adding Vagrant Box (e.g.: bento/ubuntu-22.04)
    vagrant_initbox;            ## Initializing Vagrant Box (review)
    ## -------------------------------------------------------------------------
    ## Objective: Infrastructure Deployment modules
    patch_vagrantfile;          ## Patching Vagrant Box (Vagrantfile)
    vagrant_deploy;             ## Deploying Vagrant Box Appliance
    ## -------------------------------------------------------------------------
    ## Objective: Accessibility Configuration modules
    vagrant_config;             ## Reviewing Vagrant Box Configuration
    vagrant_access;             ## Validating Vagrant Box Credentials
    ## -------------------------------------------------------------------------
    ## Objective: User Account modules
    service_account;            ## Creating Service Account Script
    sudoers_privileges;         ## Configuring Sudoers Privileges
    transfer_credentials;       ## Transferring Access Credentials
    ## -------------------------------------------------------------------------
    ## Objective: User Login modules
    sudoers_autologin;          ## Configuring Auto-Login Capabilities
    service_access;             ## Transferring SSH Access Credentials
    ## -------------------------------------------------------------------------
    ## Objective: Host Configuration modules
    config_section;             ## Adding SSH Configuration Section
    ## -------------------------------------------------------------------------
    ## Objective: Guest Configuration modules
    preinst_packages;           ## Pre-Installing Core Packages
    postinst_packages;          ## Post-Installing Core Packages
    ## destroy_machine;
    return 0;
  }; alias vagrant-appliance='vagrant_appliance';

vagrant_appliance "${@}";

## Reviewing Remote Execution (vagrant)
## vagrant ssh -c "systemctl status ssh" 2>/dev/null;
## ssh vagrant -C "systemctl status ssh" 2>/dev/null;
