#!/usr/bin/env bash

## -----------------------------------------------------------------------------
## Objective: Script & Environment Variables

ubuntu_instance="ubuntu-22.04";

service_account='devops';
authorized_keys="/home/${service_account}/.ssh/authorized_keys";

devops_sshkey="devnetops.pub";

github_content='raw.githubusercontent.com';
github_repo='emvaldes/devops-systems';

function vagrant_appliance () {
    local counter=0;
    local status=;
    ## Required Local Vagrant Structure
    local temp_vagrant="/tmp/vagrant";
    mkdir -pv ${temp_vagrant}/shared;
    ## -----------------------------------------------------------------------------
    ## Objective: Reviewing existing Vagrant Infrastructure
    tree -a ${HOME}/.vagrant.d/;
    status=$?; echo -e "\nStatus [ ((counter++)) ]: ${status}\n";
    vagrant box list;
    status=$?; echo -e "\nStatus [ ((counter++)) ]: ${status}\n";
    ## -----------------------------------------------------------------------------
    ## Objective: Adding Vagrant Box (bento/ubuntu-22.04)
    vagrant box add bento/${ubuntu_instance} \
          --force \
          --provider virtualbox;
    status=$?; echo -e "\nStatus [ ((counter++)) ]: ${status}\n";
    tree -a ${HOME}/.vagrant.d/boxes/;
    status=$?; echo -e "\nStatus [ ((counter++)) ]: ${status}\n";
    vagrant box list;
    status=$?; echo -e "\nStatus [ ((counter++)) ]: ${status}\n";
    ## -----------------------------------------------------------------------------
    ## Objective: Initializing Vagrant Box (review)
    mkdir -p ${HOME}/.vagrant.d/sources/${ubuntu_instance} && cd $_;
    status=$?; echo -e "\nStatus [ ((counter++)) ]: ${status}\n";
    vagrant init bento/${ubuntu_instance};
    status=$?; echo -e "\nStatus [ ((counter++)) ]: ${status}\n";
    tree -a ${HOME}/.vagrant.d/;
    status=$?; echo -e "\nStatus [ ((counter++)) ]: ${status}\n";
    ## -----------------------------------------------------------------------------
    ## Objective: Patching Vagrant Box (Vagrantfile)
    ## Create Patch-file:
    ## diff -u ./Vagrantfile ./custom.configs > ./patch-vagrantfile;
    script_name="patch-vagrantfile";
    remote_resource="platforms/vagrant/${script_name}";
    curl --silent \
         --output ${temp_vagrant}/${script_name} \
         https://${github_content}/${github_repo}/master/${remote_resource};
    status=$?; echo -e "\nStatus [ ((counter++)) ]: ${status}\n";
    patch ${HOME}/.vagrant.d/sources/${ubuntu_instance}/Vagrantfile \
        < ${temp_vagrant}/patch-vagrantfile;
    status=$?; echo -e "\nStatus [ ((counter++)) ]: ${status}\n";
    vagrant validate;
    status=$?; echo -e "\nStatus [ ((counter++)) ]: ${status}\n";
    ## -----------------------------------------------------------------------------
    ## Objective: Deploying Vagrant Box Appliance
    vagrant up;
    ## status=1
    ## A VirtualBox machine with the name 'devops-console' already exists.
    ## Please use another name or delete the machine with the existing
    ## name, and try again.
    status=$?; [[ $status -ne 0 ]] && {
        echo -e "\nStatus [ ((counter++)) ]: ${status}\n"; return $status;
      };
    tree ${HOME}/.vagrant.d/boxes/;
    status=$?; echo -e "\nStatus [ ((counter++)) ]: ${status}\n";
    ## -----------------------------------------------------------------------------
    ## Objective: Reviewing Vagrant Box Configuration
    vagrant status;
    status=$?; echo -e "\nStatus [ ((counter++)) ]: ${status}\n";
    vagrant ssh-config;
    ## status=1
    ## The provider for this Vagrant-managed machine is reporting that it
    ## is not yet ready for SSH. Depending on your provider this can carry
    ## different meanings. Make sure your machine is created and running and
    ## try again. Additionally, check the output of `vagrant status` to verify
    ## that the machine is in the state that you expect. If you continue to
    ## get this error message, please view the documentation for the provider
    ## you're using.
    status=$?; [[ $status -ne 0 ]] && {
        echo -e "\nStatus [ ((counter++)) ]: ${status}\n"; return $status;
      };
    ## -----------------------------------------------------------------------------
    ## Objective: Validating Vagrant Box Credentials
    machine_configs=".vagrant/machines/default/virtualbox";
    cat ${HOME}/.vagrant.d/sources/ubuntu-22.04/${machine_configs}/private_key;
    status=$?; echo -e "\nStatus [ ((counter++)) ]: ${status}\n";
    vagrant ssh -c \
            "fold -b -w 70 /home/vagrant/.ssh/authorized_keys" 2>/dev/null;
    status=$?; echo -e "\nStatus [ ((counter++)) ]: ${status}\n";
    ## -----------------------------------------------------------------------------
    ## Objective: Reviewing Remote Execution (vagrant)
    vagrant ssh -c "systemctl status ssh"; ## 2>/dev/null;
    ## status=1
    ## VM must be running to open SSH connection. Run `vagrant up`
    ## to start the virtual machine.
    status=$?; [[ $status -ne 0 ]] && {
        echo -e "\nStatus [ ((counter++)) ]: ${status}\n"; return $status;
      };
    ## -----------------------------------------------------------------------------
    ## Objective: Executing SUDO Configuration Script
    script_name="service-account.shell";
    remote_resource="platforms/vagrant/${script_name}";
    curl --silent \
         https://${github_content}/${github_repo}/master/${remote_resource} \
    | vagrant ssh -c 'bash -';
    ## status=1
    ## VM must be running to open SSH connection. Run `vagrant up`
    ## to start the virtual machine.
    status=$?; [[ $status -ne 0 ]] && {
        echo -e "\nStatus [ ((counter++)) ]: ${status}\n"; return $status;
      };
    ## -----------------------------------------------------------------------------
    ## Objective: Transferring SSH Access Credentials
    cat ${HOME}/.ssh/public/${devops_sshkey};
    status=$?; echo -e "\nStatus [ ((counter++)) ]: ${status}\n";
    cp -v ${HOME}/.ssh/${devops_sshkey} ${temp_vagrant}/shared/;
    status=$?; echo -e "\nStatus [ ((counter++)) ]: ${status}\n";
    vagrant ssh -c \
            "cat /shared/${devops_sshkey} | sudo tee -a ${authorized_keys}";
    ## status=1
    ## VM must be running to open SSH connection. Run `vagrant up`
    ## to start the virtual machine.
    status=$?; [[ $status -ne 0 ]] && {
        echo -e "\nStatus [ ((counter++)) ]: ${status}\n"; return $status;
      };
    vagrant ssh -c \
            "sudo cat ${authorized_keys} | fold -b -w 70";
    ## status=1
    ## VM must be running to open SSH connection. Run `vagrant up`
    ## to start the virtual machine.
    status=$?; [[ $status -ne 0 ]] && {
        echo -e "\nStatus [ ((counter++)) ]: ${status}\n"; return $status;
      };
    rm -v ${temp_vagrant}/shared/${devops_sshkey};
    status=$?; echo -e "\nStatus [ ((counter++)) ]: ${status}\n";
    ## -----------------------------------------------------------------------------
    ## Objective: Adding SSH Configuration Section
    cd ${HOME}/.vagrant.d/sources/${ubuntu_instance};
    status=$?; echo -e "\nStatus [ ((counter++)) ]: ${status}\n";
    private_sshkey="${HOME}/.ssh/private/${devops_sshkey/.pub/}";
    vagrant ssh-config \
          | sed -e "s|Host default|Host vagrant--ubuntu-22.04|g" \
                -e "s|\(User \)\(.*\)|\1${service_account}|g" \
                -e "s|\( IdentityFile \)\(.*\)|\1${private_sshkey}|g" \
    >> ${HOME}/.ssh/config;
    status=$?; echo -e "\nStatus [ ((counter++)) ]: ${status}\n";
    egrep -A12 "^Host vagrant--${ubuntu_instance}" ${HOME}/.ssh/config;
    status=$?; [[ $status -ne 0 ]] && {
        echo -e "\nStatus [ ((counter++)) ]: ${status}\n"; return $status;
      };
    ## -----------------------------------------------------------------------------
    ## Objective: Reviewing Remote Execution (ssh)
    ssh vagrant--ubuntu-22.04 -C \
        "systemctl status ssh" 2>/dev/null;
    status=$?; [[ $status -ne 0 ]] && {
        echo -e "\nStatus [ ((counter++)) ]: ${status}\n"; return $status;
      };
    ## -----------------------------------------------------------------------------
    ## Objective: Pre-Installing Core Packages
    script_name="ubuntu-preinstall.shell";
    remote_resource="platforms/vagrant/${script_name}";
    curl --silent \
         https://${github_content}/${github_repo}/master/${remote_resource} \
    | vagrant ssh -c 'bash -';
    ## status=1
    ## VM must be running to open SSH connection. Run `vagrant up`
    ## to start the virtual machine.
    status=$?; [[ $status -ne 0 ]] && {
        echo -e "\nStatus [ ((counter++)) ]: ${status}\n"; return $status;
      };
    ## -----------------------------------------------------------------------------
    ## Objective: Post-Installing Core Packages
    script_name="ubuntu-postinstall.shell";
    remote_resource="platforms/vagrant/${script_name}";
    curl --silent \
         https://${github_content}/${github_repo}/master/${remote_resource} \
    | vagrant ssh -c 'bash -';
    ## status=1
    ## VM must be running to open SSH connection. Run `vagrant up`
    ## to start the virtual machine.
    status=$?; [[ $status -ne 0 ]] && {
        echo -e "\nStatus [ ((counter++)) ]: ${status}\n"; return $status;
      };
    ## -----------------------------------------------------------------------------
    ## Objective: Destroying Vagrant Box (ubuntu)
    ## cd ${HOME}/.vagrant.d/sources/${ubuntu_instance};
    ## vagrant destroy;
    return 0;
  }; alias vagrant-appliance='vagrant_appliance';

vagrant_appliance;
