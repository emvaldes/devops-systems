#!/usr/bin/env bash

[[ ${#1} -gt 0 ]] && export vagrant_boxset="${1}" \
                  || export vagrant_boxset='bento/ubuntu-22.04';

export vagrant_cloudset="${vagrant_boxset%%\/*}";
export ubuntu_instance="${vagrant_boxset##*\/}";

## Default Service Account:
[[ ${#2} -gt 0 ]] && export service_account="${2}" \
                  || export service_account='devops';

## DevNetOps framework credentials:
[[ ${#3} -gt 0 ]] && export devops_sshkey="${3}" \
                  || export devops_sshkey='devnetops.pub';

## -----------------------------------------------------------------------------
## Objective: Script & Environment Variables

## SSH Access authorized keys:
export authorized_keys="/home/${service_account}/.ssh/authorized_keys";

## GitHub raw user content:
export github_content='raw.githubusercontent.com';
export github_repo='emvaldes/devops-systems';

## Temporary folder/container:
export local_temp="${HOME}/.local/tmp";
export temp_vagrant="${local_temp}/vagrant";
mkdir -p "${temp_vagrant}";

## Events status counter:
export counter=0;

function newline () { echo -e; return 0; };

function check_status () {
    status=${1};
    if [[ ${status} -ne 0 ]]; then
              user_input="$((counter++))\t= Error was found. Continue [Y/n]: ";
              newline; read -t 15 -p "${user_input}" response;
              if [[ ${#response} -eq 0 ]]; then
                      echo -e "Warning: Aborting execution! ";
                      exit ${status};
                else  selection="$(
                          echo -e ${response}|tr '[[:upper:]]' '[[:lower:]]'
                        )";
                      if [[ 'Y|y' =~ "${selection:0:1}" ]]; then
                              return 0;
                        else  exit ${status};
                      fi;
              fi;
        else  return 0;
      fi;
    # return 0;
  }; alias check-status='check_status';

## -----------------------------------------------------------------------------
## Objective: Reviewing existing Vagrant Infrastructure
function vagrant_review () {
    tree -a ${HOME}/.vagrant.d/;
    check_status $?;
    vagrant box list;
    check_status $?;
    return 0;
  }; alias vagrant-review='vagrant_review';

## -----------------------------------------------------------------------------
## Objective: Adding Vagrant Box (bento/ubuntu-22.04)
function vagrant_addbox () {
    vagrant box add ${vagrant_boxset} \
          --force \
          --provider virtualbox;
    check_status $?;
    tree -a ${HOME}/.vagrant.d/boxes/;
    check_status $?;
    vagrant box list;
    check_status $?;
    return 0;
  }; alias vagrant-addbox='vagrant_addbox';

## -----------------------------------------------------------------------------
## Objective: Initializing Vagrant Box (review)
function vagrant_initbox () {
    mkdir -p ${HOME}/.vagrant.d/sources/${ubuntu_instance} && cd $_;
    check_status $?;
    vagrant init ${vagrant_boxset};
    check_status $?;
    tree -a ${HOME}/.vagrant.d/;
    check_status $?;
    return 0;
  }; alias vagrant-initbox='vagrant_initbox';

## -----------------------------------------------------------------------------
## Objective: Patching Vagrant Box (Vagrantfile)
## Create Patch-file:
## diff -u ./Vagrantfile ./custom.configs > ./patch-vagrantfile;
function patch_vagrantfile () {
    local patch_vagrantfile="patch-vagrantfile";
    local remote_resource="platforms/vagrant/${patch_vagrantfile}";
    curl --silent \
         --output ${temp_vagrant}/${patch_vagrantfile} \
         https://${github_content}/${github_repo}/master/${remote_resource};
    check_status $?;
    cat ${temp_vagrant}/${patch_vagrantfile};
    check_status $?;
    patch ${HOME}/.vagrant.d/sources/${ubuntu_instance}/Vagrantfile \
        < ${temp_vagrant}/patch-vagrantfile;
    check_status $?;
    vagrant validate;
    check_status $?;
    return 0;
  }; alias patch-vagrantfile='patch_vagrantfile';

## -----------------------------------------------------------------------------
## Objective: Deploying Vagrant Box Appliance
## status=1
## A VirtualBox machine with the name 'devops-console' already exists.
## Please use another name or delete the machine with the existing
## name, and try again.
function vagrant_deploy () {
    vagrant up;
    check_status $?;
    tree ${HOME}/.vagrant.d/boxes/;
    check_status $?;
    return 0;
  }; alias vagrant-deploy='vagrant_deploy';

## -----------------------------------------------------------------------------
## Objective: Reviewing Vagrant Box Configuration
## status=1
## The provider for this Vagrant-managed machine is reporting that it
## is not yet ready for SSH. Depending on your provider this can carry
## different meanings. Make sure your machine is created and running and
## try again. Additionally, check the output of `vagrant status` to verify
## that the machine is in the state that you expect. If you continue to
## get this error message, please view the documentation for the provider
## you're using.
function vagrant_config () {
    vagrant status;
    check_status $?;
    vagrant ssh-config;
    check_status $?;
    return 0;
  }; alias vagrant-config='vagrant_config';

## -----------------------------------------------------------------------------
## Objective: Validating Vagrant Box Credentials
function vagrant_access () {
    local target_path="${HOME}/.vagrant.d/sources/${ubuntu_instance}";
    local machine_configs=".vagrant/machines/default/virtualbox";
    cat ${target_filepath}/${machine_configs}/private_key;
    vagrant ssh -c \
            "fold -b -w 70 /home/vagrant/.ssh/authorized_keys" 2>/dev/null;
    check_status $?;
    return 0;
  }; alias vagrant-access='vagrant_access';

## -----------------------------------------------------------------------------
## Objective: Executing SUDO Configuration Script
## status=1
## VM must be running to open SSH connection. Run `vagrant up`
## to start the virtual machine.
function service_account () {
    local script_name="service-account.shell";
    local remote_resource="platforms/vagrant/${script_name}";
    curl --silent \
         https://${github_content}/${github_repo}/master/${remote_resource} \
    | vagrant ssh -c 'bash -';
    check_status $?;
    return 0;
  }; alias service-account='service_account';

## -----------------------------------------------------------------------------
## Objective: Transferring SSH Access Credentials
## status=1
## VM must be running to open SSH connection. Run `vagrant up`
## to start the virtual machine.
function service_access () {
    cat ${HOME}/.ssh/public/${devops_sshkey};
    check_status $?;
    cp -v ${HOME}/.ssh/${devops_sshkey} ${temp_vagrant}/shared/;
    check_status $?;
    vagrant ssh -c \
            "cat /shared/${devops_sshkey} | sudo tee -a ${authorized_keys}";
    check_status $?;
    vagrant ssh -c \
            "sudo cat ${authorized_keys} | fold -b -w 70";
    check_status $?;
    rm -v ${temp_vagrant}/shared/${devops_sshkey};
    check_status $?;
    return 0;
  }; alias service-access='service_access';

## -----------------------------------------------------------------------------
## Objective: Adding SSH Configuration Section
function config_section () {
    local private_sshkey="${HOME}/.ssh/private/${devops_sshkey/.pub/}";
    ## Purging configuration block if it already exists
    section_header="/Host vagrant--${ubuntu_instance}";
    sed -i '' "${section_header}/,/LogLevel FATAL/d" ${HOME}/.ssh/config ;
    sed -i '' '/^$/N;/^\n$/D' ~/.ssh/config ;
    cd ${HOME}/.vagrant.d/sources/${ubuntu_instance};
    check_status $?;
    vagrant ssh-config \
          | sed -e "s|Host default|Host vagrant--${ubuntu_instance}|g" \
                -e "s|\(User \)\(.*\)|\1${service_account}|g" \
                -e "s|\( IdentityFile \)\(.*\)|\1${private_sshkey}|g" \
    >> ${HOME}/.ssh/config;
    check_status $?;
    egrep -A12 "^Host vagrant--${ubuntu_instance}" ${HOME}/.ssh/config;
    check_status $?;
    return 0;
  }; alias config-section='config_section';

## -----------------------------------------------------------------------------
## Objective: Pre-Installing Core Packages
## status=1
## VM must be running to open SSH connection. Run `vagrant up`
## to start the virtual machine.
function preinst_package () {
    local script_name="ubuntu-preinstall.shell";
    local remote_resource="platforms/vagrant/${script_name}";
    curl --silent \
         https://${github_content}/${github_repo}/master/${remote_resource} \
    | vagrant ssh -c 'bash -';
    check_status $?;
    return 0;
  }; alias preinst-package='preinst_package';

## -----------------------------------------------------------------------------
## Objective: Post-Installing Core Packages
## status=1
## VM must be running to open SSH connection. Run `vagrant up`
## to start the virtual machine.
function postinst_package () {
    local script_name="ubuntu-postinstall.shell";
    local remote_resource="platforms/vagrant/${script_name}";
    curl --silent \
         https://${github_content}/${github_repo}/master/${remote_resource} \
    | vagrant ssh -c 'bash -';
    check_status $?;
    return 0;
  }; alias postinst-package='postinst_package';

## -----------------------------------------------------------------------------
## Objective: Destroying Vagrant Box (ubuntu)
function destroy_appliance () {
    cd ${HOME}/.vagrant.d/sources/${ubuntu_instance};
    vagrant destroy;
    check_status $?;
    return 0;
  }; alias destroy-appliance='destroy_appliance';

## -----------------------------------------------------------------------------
## Objective: Deploy Vagrant Appliance
function vagrant_appliance () {
    mkdir -pv ${temp_vagrant}/shared;
    vagrant_review;
    vagrant_addbox;
    vagrant_initbox;
    patch_vagrantfile;
    vagrant_deploy;
    vagrant_config;
    vagrant_access;
    service_account;
    service_access;
    config_section;
    preinst_package;
    postinst_package;
    ## destroy_machine;
    return 0;
  }; alias vagrant-appliance='vagrant_appliance';

vagrant_appliance;

## Reviewing Remote Execution (vagrant)
## vagrant ssh -c "systemctl status ssh" 2>/dev/null;
## ssh vagrant -C "systemctl status ssh" 2>/dev/null;
