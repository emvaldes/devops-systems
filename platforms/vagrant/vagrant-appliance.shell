#!/usr/bin/env bash

[[ ${#1} -gt 0 ]] && export vagrant_boxset="${1}" \
                  || export vagrant_boxset='bento/ubuntu-22.04';

export vagrant_cloudset="${vagrant_boxset%%\/*}";
export vagrant_instance="${vagrant_boxset##*\/}";

## Default Service Account:
[[ ${#2} -gt 0 ]] && export devops_account="${2}" \
                  || export devops_account='devops';

## DevNetOps framework credentials:
[[ ${#3} -gt 0 ]] && export devops_sshkey="${3}" \
                  || export devops_sshkey='devnetops.pub';

## Virtual Machine hostname
[[ ${#3} -gt 0 ]] && export virtual_machine="${4}" \
                  || export virtual_machine='devops-console';

## -----------------------------------------------------------------------------
## Objective: Script & Environment Variables

## SSH Access authorized keys:
export authorized_keys="/home/${devops_account}/.ssh/authorized_keys";

## Target Vagrant Home folder:
export vagrant_projects="${HOME}/.vagrant.d";
mkdir -p "${vagrant_projects}/sources";

## Target Vagrant Instance Location:
export vagrant_location="${vagrant_projects}/sources/${vagrant_instance}";
mkdir -p "${vagrant_location}";

## GitHub raw user content:
export github_content='raw.githubusercontent.com';
export github_repo='emvaldes/devops-systems';

## Temporary folder/container:
export local_temp="${HOME}/.local/tmp";
export vagrant_temp="${local_temp}/vagrant";
export vagrant_shared="${vagrant_temp}/shared";

## Constructing a Vagrant Shared folder to exchange content
mkdir -p "${vagrant_shared}";

## Events status counter:
export counter=0;

function newline () { echo -e; return 0; };

## -----------------------------------------------------------------------------
## Objective: Parsing operational status for each event
function check_status () {
    status=${1};
    if [[ ${status} -ne 0 ]]; then
            user_input="$((counter++)) = Error was found. Continue [N/y]: ";
            newline; read -t 15 -p "${user_input}" response;
            if [[ ${#response} -gt 0 ]]; then
                    selection="$(
                        echo -e ${response} | tr '[[:upper:]]' '[[:lower:]]'
                      )";
                    if [[ 'n' =~ "${selection:0:1}" ]]; then
                            exit ${status};
                      else  return 0;
                    fi;
              else  exit ${status};
            fi;
      else  return 0;
    fi;
    # return 0;
  }; alias check-status='check_status';

## -----------------------------------------------------------------------------
## Objective: Reviewing existing Vagrant Infrastructure
function vagrant_review () {
    tree -a ${vagrant_projects};
    check_status $?;
    vagrant box list;
    check_status $?;
    local existing="$(
        vagrant box list | grep -F "${vagrant_boxset}"
      )";
    if [[ ${#existing} -gt 0 ]]; then
      user_input="$((counter++)) = ${vagrant_boxset} was found. Destroy [N/y]: ";
      newline; read -t 15 -p "${user_input}" response;
      if [[ ${#response} -gt 0 ]]; then
              newline; read -t 30 -p "${user_input}" response;
              if [[ ${#response} -gt 0 ]]; then
                      selection="$(
                          echo -e ${response} | tr '[[:upper:]]' '[[:lower:]]'
                        )";
                      if [[ 'n' =~ "${selection:0:1}" ]]; then
                              return 0;
                        else  cd ${vagrant_location};
                              vagrant destroy --graceful;
                              vagrant box remove "${vagrant_boxset}" \
                                      --provider virtualbox \
                                      --force \
                                      --all;
                      fi;
                else  exit ${status};
              fi;
        else  return 0;
      fi;
    fi;
    return 0;
  }; alias vagrant-review='vagrant_review';

## -----------------------------------------------------------------------------
## Objective: Adding Vagrant Box (bento/ubuntu-22.04)
function vagrant_addbox () {
    vagrant box add ${vagrant_boxset} \
          --force \
          --provider virtualbox;
    check_status $?;
    tree -a ${vagrant_projects}/boxes;
    check_status $?;
    vagrant box list;
    check_status $?;
    return 0;
  }; alias vagrant-addbox='vagrant_addbox';

## -----------------------------------------------------------------------------
## Objective: Initializing Vagrant Box (review)
function vagrant_initbox () {
    cd ${vagrant_location};
    mkdir -p ${vagrant_location} && cd $_;
    [[ -e ./Vagrantfile ]] && rm -fv ./Vagrantfile;
    check_status $?;
    vagrant init ${vagrant_boxset};
    check_status $?;
    tree -a ${vagrant_projects};
    check_status $?;
    return 0;
  }; alias vagrant-initbox='vagrant_initbox';

## -----------------------------------------------------------------------------
## Objective: Patching Vagrant Box (Vagrantfile)
## Create Patch-file:
## diff -u ./Vagrantfile ./custom.configs > ./patch-vagrantfile;
function patch_vagrantfile () {
    cd ${vagrant_location};
    local patch_vagrantfile="patch-vagrantfile";
    local remote_resource="platforms/vagrant/${patch_vagrantfile}";
    rm -fv ${vagrant_temp}/${patch_vagrantfile} 2>/dev/null;
    # check_status $?;
    curl --silent \
         --output ${vagrant_temp}/${patch_vagrantfile} \
         https://${github_content}/${github_repo}/master/${remote_resource};
    check_status $?;
    while [[ ! -e ${vagrant_temp}/${patch_vagrantfile} ]]; do
      echo -e '.'; sleep 1;
    done; echo -e;
    check_status $?;
    # cat ${vagrant_temp}/${patch_vagrantfile};
    # --- ./Vagrantfile         2023-01-08 15:16:11
    # +++ ./custom.vagrantfile  2023-01-08 15:30:15
    # @@ -67,4 +67,11 @@
    #    #   apt-get update
    #    #   apt-get install -y apache2
    #    # SHELL
    # +
    # +  config.vm.synced_folder "{{ vagrant-shared }}", "/shared"
    # +  config.vm.hostname = "{{ vagrant-instance }}"
    # +  config.vm.provider "virtualbox" do |console|
    # +    console.name = "{{ vagrant-instance }}"
    # +  end
    # +
    #  end
    ## Updating the vagrant-shared placeholder
    sed -i '' -e "s|{{ vagrant-shared }}|${vagrant_shared}|" \
                 ${vagrant_temp}/${patch_vagrantfile};
    check_status $?;
    ## Updating the vagrant-instance placeholder
    sed -i '' -e "s|{{ vagrant-instance }}|${vagrant_instance}|" \
                 ${vagrant_temp}/${patch_vagrantfile};
    check_status $?;
    cat -n ${vagrant_temp}/${patch_vagrantfile};
    patch ${vagrant_location}/Vagrantfile < ${vagrant_temp}/patch-vagrantfile;
    check_status $?;
    vagrant validate;
    check_status $?;
    return 0;
  }; alias patch-vagrantfile='patch_vagrantfile';

## -----------------------------------------------------------------------------
## Objective: Deploying Vagrant Box Appliance
function vagrant_deploy () {
    cd ${vagrant_location};
    vagrant up;
    check_status $?;
    tree ${vagrant_projects}/boxes/;
    check_status $?;
    return 0;
  }; alias vagrant-deploy='vagrant_deploy';

## -----------------------------------------------------------------------------
## Objective: Reviewing Vagrant Box Configuration
function vagrant_config () {
    cd ${vagrant_location};
    vagrant status;
    check_status $?;
    vagrant ssh-config;
    check_status $?;
    return 0;
  }; alias vagrant-config='vagrant_config';

## -----------------------------------------------------------------------------
## Objective: Validating Vagrant Box Credentials
function vagrant_access () {
    local machine_configs=".vagrant/machines/default/virtualbox";
    cat ${vagrant_location}/${machine_configs}/private_key;
    vagrant ssh -c \
            "fold -b -w 70 /home/vagrant/.ssh/authorized_keys" 2>/dev/null;
    check_status $?;
    return 0;
  }; alias vagrant-access='vagrant_access';

## -----------------------------------------------------------------------------
## Objective: Creating Service Account Script
function service_account () {
    cd ${vagrant_location};
    local script_name="service-account.shell";
    local remote_resource="platforms/vagrant/${script_name}";
    rm -fv ${vagrant_temp}/${script_name} 2>/dev/null;
    # check_status $?;
    curl --silent \
         --output ${vagrant_temp}/${script_name} \
         https://${github_content}/${github_repo}/master/${remote_resource};
    check_status $?;
    while [[ ! -e ${vagrant_temp}/${script_name} ]]; do
      echo -e '.'; sleep 1;
    done; echo -e;
    check_status $?;
    ## Updating the service-account placeholder
    sed -i '' -e "s|{{ service-account }}|${devops_account}|" \
                 ${vagrant_temp}/${script_name};
    check_status $?;
    vagrant ssh -c 'bash -' < ${vagrant_temp}/${script_name};
    check_status $?;
    return 0;
  }; alias service-account='service_account';

## -----------------------------------------------------------------------------
## Objective: Configuring Sudoers Privileges
function sudoers_privileges () {
    cd ${vagrant_location};
    local privileges_script="sudoers-privileges.shell";
    local remote_resource="ubuntu/modules/${privileges_script}";
    rm -fv ${vagrant_temp}/${privileges_script} 2>/dev/null;
    # check_status $?;
    curl --silent \
         --output ${vagrant_temp}/${privileges_script} \
         https://${github_content}/${github_repo}/master/${remote_resource};
    check_status $?;
    while [[ ! -e ${vagrant_temp}/${privileges_script} ]]; do
      echo -e '.'; sleep 1;
    done; echo -e;
    check_status $?;
    ## Updating the service-account placeholder
    sed -i '' -e "s|{{ service-account }}|${devops_account}|" \
                 ${vagrant_temp}/${privileges_script};
    check_status $?;
    vagrant ssh -c 'bash -' < ${vagrant_temp}/${privileges_script};
    check_status $?;
    return 0;
  }; alias sudoers-privileges='sudoers_privileges';

## -----------------------------------------------------------------------------
## Objective: Transferring Access Credentials
function transfer_credentials () {
    cd ${vagrant_location};
    fold -b -w 70 ${HOME}/.ssh/public/${devops_sshkey};
    cp -v ${HOME}/.ssh/${devops_sshkey} ${vagrant_shared};
    check_status $?;
    vagrant ssh -c \
            "cat /shared/${devops_sshkey} | sudo tee ${authorized_keys}";
    check_status $?;
    vagrant ssh -c \
            "sudo cat ${authorized_keys} | fold -b -w 70";
    check_status $?;
    rm -v ${vagrant_temp}/shared/${devops_sshkey};
    check_status $?;
    return 0;
  }; alias transfer-credentials='transfer_credentials';

## -----------------------------------------------------------------------------
## Objective: Configuring Auto-Login Capabilities
function sudoers_autologin () {
    cd ${vagrant_location};
    local autologin_script="sudoers-autologin.shell";
    local remote_resource="ubuntu/modules/${autologin_script}";
    rm -fv ${vagrant_temp}/${autologin_script} 2>/dev/null;
    # check_status $?;
    curl --silent \
         --output ${vagrant_temp}/${autologin_script} \
         https://${github_content}/${github_repo}/master/${remote_resource};
    check_status $?;
    while [[ ! -e ${vagrant_temp}/${autologin_script} ]]; do
      echo -e '.'; sleep 1;
    done; echo -e;
    check_status $?;
    ## Updating the service-account placeholder
    sed -i '' -e "s|{{ service-account }}|${devops_account}|" \
                 ${vagrant_temp}/${autologin_script};
    check_status $?;
    ## Updating the virtual-machine placeholder
    sed -i '' -e "s|{{ virtual-machine }}|${virtual_machine}|" \
                 ${vagrant_temp}/${autologin_script};
    check_status $?;
    vagrant ssh -c 'bash -' < ${vagrant_temp}/${autologin_script};
    check_status $?;
    return 0;
  }; alias sudoers-autologin='sudoers_autologin';

## -----------------------------------------------------------------------------
## Objective: Transferring SSH Access Credentials
function service_access () {
    cd ${vagrant_location};
    cat ${HOME}/.ssh/public/${devops_sshkey};
    check_status $?;
    cp -v ${HOME}/.ssh/${devops_sshkey} ${vagrant_shared};
    check_status $?;
    vagrant ssh -c \
            "cat /shared/${devops_sshkey} | sudo tee ${authorized_keys}";
    check_status $?;
    vagrant ssh -c \
            "sudo cat ${authorized_keys} | fold -b -w 70";
    check_status $?;
    rm -v ${vagrant_temp}/shared/${devops_sshkey};
    check_status $?;
    return 0;
  }; alias service-access='service_access';

## -----------------------------------------------------------------------------
## Objective: Adding SSH Configuration Section
function config_section () {
    cd ${vagrant_location};
    local private_sshkey="~/.ssh/private/${devops_sshkey/.pub/}";
    ## Purging configuration block if it already exists
    local section_header="/Host vagrant--${vagrant_instance}";
    sed -i '' "${section_header}/,/LogLevel FATAL/d" ${HOME}/.ssh/config;
    sed -i '' '/^$/N;/^\n$/D' ~/.ssh/config;
    check_status $?;
    vagrant ssh-config \
          | sed -e "s|Host default|Host vagrant--${vagrant_instance}|g" \
                -e "s|\(User \)\(.*\)|\1${devops_account}|g" \
                -e "s|\( IdentityFile \)\(.*\)|\1${private_sshkey}|g" \
    >> ${HOME}/.ssh/config;
    check_status $?;
    egrep -A12 "^Host vagrant--${vagrant_instance}" ${HOME}/.ssh/config;
    check_status $?;
    return 0;
  }; alias config-section='config_section';

## -----------------------------------------------------------------------------
## Objective: Pre-Installing Core Packages
function preinst_package () {
    cd ${vagrant_location};
    local script_name="ubuntu-preinstall.shell";
    local remote_resource="ubuntu/modules/${script_name}";
    rm -fv ${vagrant_temp}/${script_name} 2>/dev/null;
    # check_status $?;
    curl --silent \
         --output ${vagrant_temp}/${script_name} \
         https://${github_content}/${github_repo}/master/${remote_resource};
    check_status $?;
    while [[ ! -e ${vagrant_temp}/${script_name} ]]; do
      echo -e '.'; sleep 1;
    done; echo -e;
    check_status $?;
    vagrant ssh -c 'bash -' < ${vagrant_temp}/${script_name};
    check_status $?;
    return 0;
  }; alias preinst-package='preinst_package';

## -----------------------------------------------------------------------------
## Objective: Post-Installing Core Packages
function postinst_package () {
    cd ${vagrant_location};
    local script_name="ubuntu-postinstall.shell";
    local remote_resource="ubuntu/modules/${script_name}";
    rm -fv ${vagrant_temp}/${script_name} 2>/dev/null;
    # check_status $?;
    curl --silent \
         --output ${vagrant_temp}/${script_name} \
         https://${github_content}/${github_repo}/master/${remote_resource};
    check_status $?;
    while [[ ! -e ${vagrant_temp}/${script_name} ]]; do
      echo -e '.'; sleep 1;
    done; echo -e;
    check_status $?;
    vagrant ssh -c 'bash -' < ${vagrant_temp}/${script_name};
    check_status $?;
    return 0;
  }; alias postinst-package='postinst_package';

## -----------------------------------------------------------------------------
## Objective: Destroying Vagrant Box (ubuntu)
function destroy_appliance () {
    cd ${vagrant_location};
    vagrant destroy;
    check_status $?;
    return 0;
  }; alias destroy-appliance='destroy_appliance';

## -----------------------------------------------------------------------------
## Objective: Deploy Vagrant Appliance
function vagrant_appliance () {
    mkdir -pv ${vagrant_shared};
    vagrant_review;
    vagrant_addbox;
    vagrant_initbox;
    patch_vagrantfile;
    vagrant_deploy;
    vagrant_config;
    vagrant_access;
    service_account;
    sudoers_privileges;
    transfer_credentials;
    sudoers_autologin;
    service_access;
    config_section;
    preinst_package;
    postinst_package;
    ## destroy_machine;
    return 0;
  }; alias vagrant-appliance='vagrant_appliance';

vagrant_appliance;

## Reviewing Remote Execution (vagrant)
## vagrant ssh -c "systemctl status ssh" 2>/dev/null;
## ssh vagrant -C "systemctl status ssh" 2>/dev/null;
