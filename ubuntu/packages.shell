#!/usr/bin/env bash

## Objective:
## This first-release is to test the script's capabilities to identify if a
## package is installed or not. All these packages were manually installed.
## After this initial test, the target Virtual Machine will be reset to its
## baseline and the script will start installing all these packages.

## Notes: These are target (pending) tools with custom installations
## [configuration]:   pulumi
## [cloud tools]:     aws-iam-authenticator, awscli, saml2aws
## [hashicorp]:       boundary, consul, nomad, packer, terraform, vagrant, vault, waypoint

## -----------------------------------------------------------------------------
## Objective: Printing empty lines (output)
function newline () { echo -e; return 0; };

## -----------------------------------------------------------------------------
## Objective: Printing (output) without terminating newline
function inline ()  { echo -en "${@}"; return 0; };

## -----------------------------------------------------------------------------
## Objective: Printing custom messages (formatting is provided)
function display () {
    message="${1}";
    [[ ${#message} -gt 0 ]] && {
      newline; echo -e "${message}"; ## newline;
    }; return 0;
  };

## -----------------------------------------------------------------------------
## Objective: Printing inline to simulate progress (output)
function progress () { inline '.'; return 0; };

## -----------------------------------------------------------------------------
## Objective: Printing warning messages (output)
function warning ()  { display "Warning: ${@}! "; return 0; };

## -----------------------------------------------------------------------------
## Objective: Printing comment messages (output)
function comment ()  { display "Comment: ${@}"; return 0; };

## -----------------------------------------------------------------------------
## Objective: Printing custom messages (output)
function message ()  { echo -e "${@}"; return 0; }; alias print='message';

## -----------------------------------------------------------------------------
function packages_ubuntu () {
    local oIFS="${IFS}";
    for xitem in "${@}"; do
      IFS='='; set `echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'`
      [[ ${1#*\--} = "import" ]] && local import_filename="${2}";
      [[ ${1#*\--} = "install" ]] && local install_packages='true';
      [[ ${1#*\--} = "json-file" ]] && local json_filename="${2}";
      [[ ${1#*\--} = "log-file" ]] && local log_filename="${2}";
      [[ ${1#*\--} = "pkgs-list" ]] && {
          declare -a pkgs_listing=($( message ${2} | tr ',' '\n' ));
        };
      [[ ${1#*\--} = "report-file" ]] && local report_filename="${2}";
      [[ ${1#*\--} = "help" ]] && local assistance='true';
      [[ ${1#*\--} = "examples" ]] && local example='true';
    done; IFS="${oIFS}";
    local oIFS="${IFS}"; IFS=$'\n';
    if [[ ( ${assistance} == 'true' ) || \
          ( ${example} == 'true' )
      ]]; then
      packages_ubuntu.help --caller=${FUNCNAME} --example=${example};
      return 0;
    fi;
    newline;
    timestamp="$(date +"%y%m%d%H%M%S")";
    dateset="${timestamp:0:6}";
    timeset="${timestamp:6:6}";
    ## Loading Modules (dependencies):
    declare -a modules=(
        export2json.shell
      );
    for module in ${modules[@]}; do
      if [[ -e $(pwd)/${module} ]]; then
              message "Loading: '${module}' module! ";
              newline;
              source $(pwd)/${module};
        else  warning "Module '${module}' is not found";
              return 99;
      fi;
    done;
    ## Script configuration
    local script_path=$( dirname ${0} );
    ## message "Script Path: ${script_path}";
    local script_name=$( basename ${0%\.*} );
    ## message "Script Name: ${script_name}";
    local script_type=$( basename ${0##*\.} );
    ## message "Script Type: ${script_type}";
    ## Define custom-parameter(s)
    if [[ ${#pkgs_listing} -eq 0 ]]; then
            local pkgs_listing='packages.list';
            ## Loading Packages Listing
            message "Loading: '${pkgs_listing}' Default Packages List! ";
            newline;
            source "${script_path}/${pkgs_listing}";
      else  message "Loading: Custom Packages List! ";
            newline;
            declare -a packages=( ${pkgs_listing[@]} );
            for package in ${packages[@]}; do message "${package}"; done;
    fi;
    [[ ${#log_filename} -eq 0 ]] && {
        log_filename='packages.log';
        message "Using: '${log_filename}' default Log file! ";
      };
    [[ ${#json_filename} -eq 0 ]] && {
        json_filename='packages.json';
        message "Using: '${json_filename}' default JSON file! ";
      };
    [[ ${#report_filename} -eq 0 ]] && {
        report_filename='packages.report';
        message "Using: '${report_filename}' default Report file! ";
      };
    if [[ ${install_packages} == 'true' ]]; then
            newline;
            message "Installing: Marked Packages! ";
      else  install_packages='false';
    fi;
    if [[ ${#import_filename} -gt 0 ]]; then
            newline;
            message "Importing: '${import_filename}' custom file! ";
            import_report='true';
      else  import_report='false';
    fi;
    ## Script Execution Log-file
    local logfile="${script_path}/${log_filename}";
    cat /dev/null > "${logfile}";
    ## Aggregated & Exported JSON-file
    local jsonfile="${script_path}/${json_filename}";
    cat /dev/null > "${jsonfile}";
    ## Installed Packages Report-file
    local reportfile="${script_path}/${report_filename}";
    cat /dev/null > "${reportfile}";
    ## Enforcing User Sandbox ~/devops
    local sandbox="${HOME}/reports";
    local reports="${sandbox}/$(
        lsb_release -d \
        | sed -e 's|\([[:blank:]]*\)||g' -e 's|Description:||' \
        | tr '[[:upper:]]' '[[:lower:]]'
      )/packages";
    ## Identifying the Installed-Packages report file
    ## Default DPKG Log-file
    local dpkg_logfile='/var/log/dpkg.log';
    ## Defining iteration counters.
    local counter=1;
    local count_miss=1;
    local count_inst=1;
    ## Processing Listed Packages:
    for xitem in ${packages[@]}; do
      # if [[ ${import_report} == 'true' ]]; then
      #         message "Processing APT Show Configuration report...";
      #         return 10;
      #   else  message "Processing default workflow...";
      # fi;
      ## Options: apt, snap
      local installer=;
      local package=;
      if [[ ${xitem} =~ ':' ]]; then
              declare -a request=($( message "${xitem}" | tr ':' '\n' ));
              package="${request[0]}";
              ## Removes first elemnent in array
              request=("${request[@]:1}");
              installer="${request[0]}";
        else  installer='apt';
	            package="${xitem}";
              request='';
      fi;
      ## Constructing package's folder (container)
      local xpath="${reports}/devops/${installer}";
      mkdir -p "${xpath}";
      ## Identifying if package is already installed.
      local status=;
      case "${installer}" in
         apt ) newline;
               package_status="$(
                   apt list --installed ${package} 2>/dev/null \
                   | egrep -v "Listing... Done" | egrep -w "^${package}.*"
                 )";
               status=$?; ;;
        snap ) package_status="$(
                  snap list ${package} | egrep -w "^${package}.*"
                )";
               status=$?; ;;
      esac;
      local result=;
      [[ ${#package_status} -gt 0 ]] && { result="present"; } || { result="absent"; }
      ## Skipping Processing blocks
      local skip_report='false';
      ## Evaluating APT Installed output
      if [[ $result == 'absent' ]]; then
              ## Package is not installed.
              message "--------------------------------------------------------------------------------";
              message "Installing: ${result} = $(( counter++ )) -> $(( count_miss++ ))";
              message "   Warning: ${package} package is not installed! ";
              message "--------------------------------------------------------------------------------";
              newline;
	            ## Conditioning Package Installation based on explicit request
              if [[ ${install_packages} == 'true' ]]; then
                ## Configuring Package Instation Reports path
                ## Legacy structure: local location="${reports}/${dateset}/${timeset}";
                local location="${reports}";
                ## Constructing target location
                mkdir -p ${location};
                ## Constructing package's folder (container)
                installed_tools="${location}/installed/${installer}";
                mkdir -p "${installed_tools}";
                ## Installing package depending on its manager (APT, SNAP)
                status=;
                case "${installer}" in
                   apt ) ## Performing installation of absent packages
                         sudo apt install ${package} --yes \
                              | tee "${installed_tools}/${package}.log";
                         status=$?; ;;
                  snap ) sudo snap install ${package} ${installer/snap /} \
                              | tee "${installed_tools}/${package}.log";
                         status=$?; ;;
                esac;
                result=;
                [[ ${status} -eq 0 ]] && { result="present"; } || { result="absent"; }
              fi;
              ## Collecting Package Details (Specs)
              status=;
              case "${installer}" in
                 apt ) ## Listing and filtering installed packages
                       package_status="$(
                           apt list --installed ${package} 2>/dev/null \
                           | egrep -v "Listing... Done" | egrep -w "^${package}.*"
                         )";
                       status=$?; ;;
                snap ) package_status="$(
                          snap list ${package} | egrep -w "^${package}.*"
                        )";
                       status=$?; ;;
              esac;
              result=;
              [[ ${status} -eq 0 ]] && { result="present"; } || { result="absent"; }
        else  ## Identify Package Upgrade Capabilities
              status=;
              case "${installer}" in
                 apt ) ## Upgrading package only if it's already installed.
                       sudo apt-get --only-upgrade install ${package} --yes 2>/dev/null ;
                       status=$?; ;;
                snap ) status=$?; ;;
              esac;
              # result=;
              # [[ ${status} -eq 0 ]] && { result="upgraded"; } || { result="latest"; }
              ## Processing Default Packages
              local default_packages="${reports}/default/${installer}";
              mkdir -p "${default_packages}";
              # local already_exists="$(
              #     find ${default_packages}/* \
              #          -type f -name ${package}.json 2>/dev/null
              #   )";
              # ## Processing Pre-Installed Packages
              for xitem in ${preinstalled[@]}; do
                ## message "Pre-Installed: ${xitem} -> ${package}";
                [[ ${xitem} == ${package} ]] && {
                    xpath="${default_packages}/native";
                    mkdir -p "${xpath}" 2>/dev/null ;
                    ## skip_report='true';
                    break;
                  };
              done;
              ## Processing Post-Installed Packages
              for xitem in ${postinstalled[@]}; do
                ## message "Post-Installed: ${xitem} -> ${package}";
                [[ ${xitem} == ${package} ]] && {
                    xpath="${default_packages}/devops";
                    mkdir -p "${xpath}" 2>/dev/null ;
                    ## skip_report='true';
                    break;
                  };
              done;
      fi;
      ## Determine if processing package-report
      if [[ ${skip_report} == 'false' ]]; then
        newline;
        message "--------------------------------------------------------------------------------";
        message " Installed: ${result} = $(( counter++ )) -> $(( count_inst++ ))";
        message "   Package: ${package_status}";
        message "--------------------------------------------------------------------------------";
        newline;
        # message "${package}" >> ${installed};
        case "${installer}" in
           apt ) ## Processing APT-Installed Packages:
                 export2json --package="${package}" \
                             --location="${xpath}";
                 ;;
          snap ) snap info ${package} | tee "${xpath}/${package}.info";
                 ;;
        esac;
      fi;
    done;
    ## Constructing a temp-cache folder
    reports_cache="${reports}/.cache";
    mkdir -p ${reports_cache};
    ## Aggregating all JSON files into the .cache folder
    find ${reports} -type f -name '*.json' | xargs -I {} cp {} ${reports_cache};
    ## Exporting Installed Packages JSON file.
    find ${reports_cache} -type f -name '*.json' \
         | sort --numeric-sort | xargs -I {} cat {} | jq -s | python -m json.tool > ${jsonfile};
    ## Removing all .cache's content
    rm -fvr ${reports_cache} 2>/dev/null;
    ## Exporting Installed Packages (name, version) ino LIST file.
    jq '.[] | "\(.Package) -> \(.Version)"' --raw-output ${jsonfile} > ${reportfile};
    newline; message "Done!"; newline;
    IFS="${oIFS}";
    return 0;
  }; alias packages-ubuntu='packages_ubuntu';

## -----------------------------------------------------------------------------
function packages_ubuntu.help () {
    local oIFS="${IFS}";
    for xitem in "${@}"; do
      IFS='='; set `echo -e "${xitem}" | sed -e '1s|^\(-\)\{1,\}||'`
      [[ ${1#*\--} = "caller" ]] && local help_caller="${2}";
      [[ ${1#*\--} = "examples" ]] && local example="${2}";
    done; IFS="${oIFS}";
    local oIFS="${IFS}"; IFS=$'\n';
    [[ ${#example} -eq 0 ]] && { local example='false'; };
    # message "Example: ${example}";
    spanwidth="${#help_caller}";
    local spacer="$( printf "% $(echo "${#help_caller} + 1" | bc)s" )";
    local spanner="$( printf "% 10s" )";
    declare -a patterns=(
        "importfile\timport.report"
        "jsonfile\tpackages.json"
        "logfile\tpackages.log"
        "packages\tpkg1,pkg2"
        "reportfile\texport.report"
      );
    declare -a usage=();
    usage+=("--import='{{ importfile }}' \\");
    usage+=("--install \\");
    usage+=("--json-file='{{ jsonfile }}' \\");
    usage+=("--log-file='{{ logfile }}' \\");
    usage+=("--pkgs-list='{{ packages }}' \\");
    usage+=("--report-file='{{ reportfile }}' \\");
    if [[ ${example} == 'false' ]]; then
            ## -------------------------------------------------------------------------
            declare -a required=();
            required+=("--install\t: Install Packages List.");
            newline;
            message "Required: ${required[0]}";
            required=("${required[@]:1}");
            for xline in ${required[@]}; do
              message "${spanner}${xline}";
            done;
            ## -------------------------------------------------------------------------
            declare -a optional=();
            optional+=("--import\t: Importing Listed Packages description.");
            optional+=("--json-file\t: Installed Packages JSON file.");
            optional+=("--log-file\t: Default Process log-file.");
            optional+=("--pkgs-list\t: Custom Packages List.");
            optional+=("--report-file\t: Installed Packages report file.");
            newline;
            message "Optional: ${optional[0]}";
            optional=("${optional[@]:1}");
            for xline in ${optional[@]}; do
              message "$( printf "% 10s" )${xline}";
            done;
            ## -----------------------------------------------------------------
            newline;
            message "Usage:";
            newline;
            inline "${help_caller/_/-} ";
            counter=0; aligned='';
            for xline in ${usage[@]}; do
              stubset='false';
              [[ ${counter} -gt 0 ]] && aligned="${spacer}";
              for xitem in ${patterns[@]}; do
                declare -a replace=($( message "${xitem}" | tr '\t' '\n' ));
                if [[ "${xline}" =~ "{{ ${replace[0]} }}" ]]; then
                   message "${aligned}${xline}" \
                  | sed -e "s|{{ ${replace[0]} }}|${replace[1]}|"
                  stubset='true'; break;
                fi;
              done;
              [[ ${stubset} == 'false' ]] && message "${aligned}${xline}";
              ((counter++));
            done;
            message ";";
            newline;
      else  ## Listing command example:
            newline;
            inline "${help_caller/_/-} ";
            message "${usage[*]}" | sed -e 's/\ \\$//g' | tr '\n' ' ';
            message ";";
            newline;
    fi;
    ## -------------------------------------------------------------------------
    # local script_location="blob/${virtualbox_platform}";
    # script_location+="/${help_caller/_/-}.shell";
    # message "GitHub Project: ${github_repo}";
    # message "        Source: ${script_location}";
    return 0;
  }; alias packages-ubuntu.help='packages_ubuntu.help';

## Execute if not load-only instruction
! [[ ${1#*\--} = "source-module" ]] && \
packages_ubuntu ${@}
