#!/usr/bin/env bash
# Script: sudoers-autologin.shell

## -----------------------------------------------------------------------------
## Objective: Printing empty lines (output)
function newline () { echo -e; return 0; };

## -----------------------------------------------------------------------------
## Objective: Printing (output) without terminating newline
function inline ()  { echo -en "${@}"; return 0; };

## -----------------------------------------------------------------------------
## Objective: Printing custom messages (formatting is provided)
function display () {
    message="${1}";
    [[ ${#message} -gt 0 ]] && {
      newline; echo -e "${message}"; ## newline;
    }; return 0;
  };

## -----------------------------------------------------------------------------
## Objective: Printing inline to simulate progress (output)
function progress () { inline '.'; return 0; };

## -----------------------------------------------------------------------------
## Objective: Printing warning messages (output)
function warning ()  { display "Warning: ${@}! "; return 0; };

## -----------------------------------------------------------------------------
## Objective: Printing comment messages (output)
function comment ()  { display "Comment: ${@}"; return 0; };

## -----------------------------------------------------------------------------
## Objective: Printing custom messages (output)
function message ()  { echo -e "${@}"; return 0; }; alias print='message';

export autologin_logfile="/tmp/sudoers-autologin.log";
cat /dev/null > ${autologin_logfile};

comment "Starting Sudoers Auto-Login" \
| tee -a "${autologin_logfile}";

## DevOps - Service Account
export devops_account='{{ service-account }}';

warning "Selectively Installing SSH Pass" \
| tee -a "${autologin_logfile}";
newline;

## This allows to run SSH using the keyboard-interactive password authentication
## mode, but in a non-interactive way. SSH uses direct TTY access to ensure that
## the password is indeed issued by an interactive keyboard user.

## Notice: It will be removed later in the script. An alternative to this is to
## use the legendary expect command but this is a quick solution.

sudo apt install sshpass --yes | tee -a "${autologin_logfile}";

comment "Auto-Generating SSH Access Keys" \
| tee -a "${autologin_logfile}";
newline;

export sshkey_fileset="${HOME}/.ssh/id_rsa";
ssh-keygen -t rsa \
           -b 4096 \
           -C {{ virtual-machine }} \
           -f ${sshkey_fileset} \
           -N '' <<<y \
| tee -a "${autologin_logfile}";

comment "Copying SSH ID to authorized-keys file" \
| tee -a "${autologin_logfile}";

## Removing all keys beloging to the localhost
ssh-keygen -R localhost;

## Copying the SSH Access Key to itself (testing)
message "${devops_account}" \
   | sshpass ssh-copy-id -i ${sshkey_fileset} \
                         -o StrictHostKeyChecking=no \
                            localhost \
   | tee -a "${autologin_logfile}";

## Performing basic housecleaning
rm -rfv ${HOME}/.ssh/ssh-copy-id* \
| tee -a "${autologin_logfile}";

warning "Removing SSH Pass tool" \
| tee -a "${autologin_logfile}";
newline;

## Removing this tool as mentioned before
sudo apt remove sshpass --yes \
| tee -a "${autologin_logfile}";

comment "Perfoming Auto-Remove operations" \
| tee -a "${autologin_logfile}";
newline;

## autoremove (apt-get(8)) autoremove is used to remove packages that were
## automatically installed to satisfy dependencies for other packages and
## are now no longer needed as dependencies changed or the package(s) needing
## them were removed in the meantime.
sudo apt autoremove --yes \
| tee -a "${autologin_logfile}";

warning "Disabling Service Account password";
| tee -a "${autologin_logfile}";
newline;

## Removing Service Account password
## Warning: This will disable the GUI login's behavior (passwordless)
sudo passwd --delete ${devops_account} \
| tee -a "${autologin_logfile}";
## passwd: password expiry information changed.

comment "Completed Sudoers Auto-Login! " \
| tee -a "${autologin_logfile}";
